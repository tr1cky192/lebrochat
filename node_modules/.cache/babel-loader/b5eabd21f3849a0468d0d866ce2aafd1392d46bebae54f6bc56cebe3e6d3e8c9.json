{"ast":null,"code":"\"use strict\";\n\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.processAckRpcError = exports.processAckErrorInfo = void 0;\nconst google_gax_1 = require(\"google-gax\");\nconst subscriber_1 = require(\"./subscriber\");\nconst permanentFailureInvalidAckId = 'PERMANENT_FAILURE_INVALID_ACK_ID';\nconst transientFailurePrefix = 'TRANSIENT_';\n// If we get these as RPC errors, they will trigger a retry.\nconst exactlyOnceDeliveryTemporaryRetryErrors = [google_gax_1.Status.DEADLINE_EXCEEDED, google_gax_1.Status.RESOURCE_EXHAUSTED, google_gax_1.Status.ABORTED, google_gax_1.Status.INTERNAL, google_gax_1.Status.UNAVAILABLE];\n/**\n * Processes the raw RPC information when sending a batch of acks\n * to the Pub/Sub service.\n *\n * @private\n */\nfunction processAckErrorInfo(rpcError) {\n  const ret = new Map();\n  if (!rpcError.errorInfoMetadata) {\n    return ret;\n  }\n  // The typing for errorInfoMetadata is currently incorrect.\n  const metadata = rpcError.errorInfoMetadata;\n  for (const ackId of Object.getOwnPropertyNames(metadata)) {\n    const code = metadata[ackId];\n    if (code === permanentFailureInvalidAckId) {\n      ret.set(ackId, {\n        transient: false,\n        response: subscriber_1.AckResponses.Invalid,\n        rawErrorCode: code\n      });\n    } else if (code.startsWith(transientFailurePrefix)) {\n      ret.set(ackId, {\n        transient: true,\n        rawErrorCode: code\n      });\n    } else {\n      ret.set(ackId, {\n        transient: false,\n        response: subscriber_1.AckResponses.Other,\n        rawErrorCode: code\n      });\n    }\n  }\n  return ret;\n}\nexports.processAckErrorInfo = processAckErrorInfo;\n/**\n * For a completely failed RPC call, this will find the appropriate\n * error information to return to an ack() caller.\n *\n * @private\n */\nfunction processAckRpcError(grpcCode) {\n  const ackError = {\n    transient: exactlyOnceDeliveryTemporaryRetryErrors.includes(grpcCode),\n    grpcErrorCode: grpcCode\n  };\n  switch (grpcCode) {\n    case google_gax_1.Status.PERMISSION_DENIED:\n      ackError.response = subscriber_1.AckResponses.PermissionDenied;\n      break;\n    case google_gax_1.Status.FAILED_PRECONDITION:\n      ackError.response = subscriber_1.AckResponses.FailedPrecondition;\n      break;\n    default:\n      ackError.response = subscriber_1.AckResponses.Other;\n      break;\n  }\n  return ackError;\n}\nexports.processAckRpcError = processAckRpcError;","map":{"version":3,"names":["google_gax_1","require","subscriber_1","permanentFailureInvalidAckId","transientFailurePrefix","exactlyOnceDeliveryTemporaryRetryErrors","Status","DEADLINE_EXCEEDED","RESOURCE_EXHAUSTED","ABORTED","INTERNAL","UNAVAILABLE","processAckErrorInfo","rpcError","ret","Map","errorInfoMetadata","metadata","ackId","Object","getOwnPropertyNames","code","set","transient","response","AckResponses","Invalid","rawErrorCode","startsWith","Other","exports","processAckRpcError","grpcCode","ackError","includes","grpcErrorCode","PERMISSION_DENIED","PermissionDenied","FAILED_PRECONDITION","FailedPrecondition"],"sources":["../../src/ack-metadata.ts"],"sourcesContent":[null],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AAEA,MAAME,4BAA4B,GAAG,kCAAkC;AACvE,MAAMC,sBAAsB,GAAG,YAAY;AAE3C;AACA,MAAMC,uCAAuC,GAAG,CAC9CL,YAAA,CAAAM,MAAM,CAACC,iBAAiB,EACxBP,YAAA,CAAAM,MAAM,CAACE,kBAAkB,EACzBR,YAAA,CAAAM,MAAM,CAACG,OAAO,EACdT,YAAA,CAAAM,MAAM,CAACI,QAAQ,EACfV,YAAA,CAAAM,MAAM,CAACK,WAAW,CACnB;AAwBD;;;;;;AAMA,SAAgBC,mBAAmBA,CAACC,QAAqB;EACvD,MAAMC,GAAG,GAAG,IAAIC,GAAG,EAAwB;EAE3C,IAAI,CAACF,QAAQ,CAACG,iBAAiB,EAAE;IAC/B,OAAOF,GAAG;;EAGZ;EACA,MAAMG,QAAQ,GAAGJ,QAAQ,CAACG,iBAAmC;EAE7D,KAAK,MAAME,KAAK,IAAIC,MAAM,CAACC,mBAAmB,CAACH,QAAQ,CAAC,EAAE;IACxD,MAAMI,IAAI,GAAGJ,QAAQ,CAACC,KAAK,CAAC;IAE5B,IAAIG,IAAI,KAAKlB,4BAA4B,EAAE;MACzCW,GAAG,CAACQ,GAAG,CAACJ,KAAK,EAAE;QACbK,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAEtB,YAAA,CAAAuB,YAAY,CAACC,OAAO;QAC9BC,YAAY,EAAEN;OACf,CAAC;KACH,MAAM,IAAIA,IAAI,CAACO,UAAU,CAACxB,sBAAsB,CAAC,EAAE;MAClDU,GAAG,CAACQ,GAAG,CAACJ,KAAK,EAAE;QACbK,SAAS,EAAE,IAAI;QACfI,YAAY,EAAEN;OACf,CAAC;KACH,MAAM;MACLP,GAAG,CAACQ,GAAG,CAACJ,KAAK,EAAE;QACbK,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAEtB,YAAA,CAAAuB,YAAY,CAACI,KAAK;QAC5BF,YAAY,EAAEN;OACf,CAAC;;;EAIN,OAAOP,GAAG;AACZ;AAlCAgB,OAAA,CAAAlB,mBAAA,GAAAA,mBAAA;AAoCA;;;;;;AAMA,SAAgBmB,kBAAkBA,CAACC,QAAgB;EACjD,MAAMC,QAAQ,GAAiB;IAC7BV,SAAS,EAAElB,uCAAuC,CAAC6B,QAAQ,CAACF,QAAQ,CAAC;IACrEG,aAAa,EAAEH;GAChB;EACD,QAAQA,QAAQ;IACd,KAAKhC,YAAA,CAAAM,MAAM,CAAC8B,iBAAiB;MAC3BH,QAAQ,CAACT,QAAQ,GAAGtB,YAAA,CAAAuB,YAAY,CAACY,gBAAgB;MACjD;IACF,KAAKrC,YAAA,CAAAM,MAAM,CAACgC,mBAAmB;MAC7BL,QAAQ,CAACT,QAAQ,GAAGtB,YAAA,CAAAuB,YAAY,CAACc,kBAAkB;MACnD;IACF;MACEN,QAAQ,CAACT,QAAQ,GAAGtB,YAAA,CAAAuB,YAAY,CAACI,KAAK;MACtC;;EAGJ,OAAOI,QAAQ;AACjB;AAlBAH,OAAA,CAAAC,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}