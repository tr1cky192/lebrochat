{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */function () {\n  /**\n   * Private internal constructor\n   * @private\n   */\n  function DiagAPI() {\n    function _logProxy(funcName) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n      };\n    }\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    var self = this;\n    // DiagAPI specific functions\n    var setLogger = function (logger, optionsOrLogLevel) {\n      var _a, _b, _c;\n      if (optionsOrLogLevel === void 0) {\n        optionsOrLogLevel = {\n          logLevel: DiagLogLevel.INFO\n        };\n      }\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n        self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n        return false;\n      }\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel\n        };\n      }\n      var oldLogger = getGlobal('diag');\n      var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n        oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n        newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n      }\n      return registerGlobal('diag', newLogger, self, true);\n    };\n    self.setLogger = setLogger;\n    self.disable = function () {\n      unregisterGlobal(API_NAME, self);\n    };\n    self.createComponentLogger = function (options) {\n      return new DiagComponentLogger(options);\n    };\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n  /** Get the singleton instance of the DiagAPI API */\n  DiagAPI.instance = function () {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n    return this._instance;\n  };\n  return DiagAPI;\n}();\nexport { DiagAPI };","map":{"version":3,"names":["DiagComponentLogger","createLogLevelDiagLogger","DiagLogLevel","getGlobal","registerGlobal","unregisterGlobal","API_NAME","DiagAPI","_logProxy","funcName","args","_i","arguments","length","logger","apply","__spreadArray","__read","self","setLogger","optionsOrLogLevel","logLevel","INFO","err","Error","error","_a","stack","message","oldLogger","newLogger","_b","suppressOverrideMessage","_c","warn","disable","createComponentLogger","options","verbose","debug","info","instance","_instance"],"sources":["C:\\Users\\Ігор\\clone\\node_modules\\@opentelemetry\\api\\src\\api\\diag.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLoggerApi,\n  DiagLogLevel,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger, DiagLoggerApi {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    const setLogger: DiagLoggerApi['setLogger'] = (\n      logger,\n      optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel,\n        };\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(\n        optionsOrLogLevel.logLevel ?? DiagLogLevel.INFO,\n        logger\n      );\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.setLogger = setLogger;\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  public setLogger!: DiagLoggerApi['setLogger'];\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}