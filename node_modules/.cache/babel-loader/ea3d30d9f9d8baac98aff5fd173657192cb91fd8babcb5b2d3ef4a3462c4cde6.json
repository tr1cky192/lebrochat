{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Subscriber = exports.Message = exports.AckError = exports.AckResponses = void 0;\nconst precise_date_1 = require(\"@google-cloud/precise-date\");\nconst projectify_1 = require(\"@google-cloud/projectify\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst events_1 = require(\"events\");\nconst api_1 = require(\"@opentelemetry/api\");\nconst semantic_conventions_1 = require(\"@opentelemetry/semantic-conventions\");\nconst histogram_1 = require(\"./histogram\");\nconst lease_manager_1 = require(\"./lease-manager\");\nconst message_queues_1 = require(\"./message-queues\");\nconst message_stream_1 = require(\"./message-stream\");\nconst default_options_1 = require(\"./default-options\");\nconst opentelemetry_tracing_1 = require(\"./opentelemetry-tracing\");\nconst temporal_1 = require(\"./temporal\");\nexports.AckResponses = {\n  PermissionDenied: 'PERMISSION_DENIED',\n  FailedPrecondition: 'FAILED_PRECONDITION',\n  Success: 'SUCCESS',\n  Invalid: 'INVALID',\n  Other: 'OTHER'\n};\n/**\n * Thrown when an error is detected in an ack/nack/modack call, when\n * exactly-once delivery is enabled on the subscription. This will\n * only be thrown for actual errors that can't be retried.\n */\nclass AckError extends Error {\n  constructor(errorCode, message) {\n    let finalMessage = `${errorCode}`;\n    if (message) {\n      finalMessage += ` : ${message}`;\n    }\n    super(finalMessage);\n    this.errorCode = errorCode;\n  }\n}\nexports.AckError = AckError;\n/**\n * Date object with nanosecond precision. Supports all standard Date arguments\n * in addition to several custom types.\n *\n * @external PreciseDate\n * @see {@link https://github.com/googleapis/nodejs-precise-date|PreciseDate}\n */\n/**\n * Message objects provide a simple interface for users to get message data and\n * acknowledge the message.\n *\n * @example\n * ```\n * subscription.on('message', message => {\n *   // {\n *   //   ackId: 'RUFeQBJMJAxESVMrQwsqWBFOBCEhPjA',\n *   //   attributes: {key: 'value'},\n *   //   data: Buffer.from('Hello, world!'),\n *   //   id: '1551297743043',\n *   //   orderingKey: 'ordering-key',\n *   //   publishTime: new PreciseDate('2019-02-27T20:02:19.029534186Z'),\n *   //   received: 1551297743043,\n *   //   length: 13\n *   // }\n * });\n * ```\n */\nclass Message {\n  /**\n   * @hideconstructor\n   *\n   * @param {Subscriber} sub The parent subscriber.\n   * @param {object} message The raw message response.\n   */\n  constructor(sub, {\n    ackId,\n    message,\n    deliveryAttempt\n  }) {\n    /**\n     * This ID is used to acknowledge the message.\n     *\n     * @name Message#ackId\n     * @type {string}\n     */\n    this.ackId = ackId;\n    /**\n     * Optional attributes for this message.\n     *\n     * @name Message#attributes\n     * @type {object}\n     */\n    this.attributes = message.attributes || {};\n    /**\n     * The message data as a Buffer.\n     *\n     * @name Message#data\n     * @type {Buffer}\n     */\n    this.data = message.data;\n    /**\n     * Delivery attempt counter is 1 + (the sum of number of NACKs and number of\n     * ack_deadline exceeds) for this message.\n     *\n     * @name Message#deliveryAttempt\n     * @type {number}\n     */\n    this.deliveryAttempt = Number(deliveryAttempt || 0);\n    /**\n     * ID of the message, assigned by the server when the message is published.\n     * Guaranteed to be unique within the topic.\n     *\n     * @name Message#id\n     * @type {string}\n     */\n    this.id = message.messageId;\n    /**\n     * Identifies related messages for which publish order should be respected.\n     * If a `Subscription` has `enableMessageOrdering` set to `true`, messages\n     * published with the same `orderingKey` value will be delivered to\n     * subscribers in the order in which they are received by the Pub/Sub\n     * system.\n     *\n     * **EXPERIMENTAL:** This feature is part of a closed alpha release. This\n     * API might be changed in backward-incompatible ways and is not recommended\n     * for production use. It is not subject to any SLA or deprecation policy.\n     *\n     * @name Message#orderingKey\n     * @type {string}\n     */\n    this.orderingKey = message.orderingKey;\n    /**\n     * The time at which the message was published.\n     *\n     * @name Message#publishTime\n     * @type {external:PreciseDate}\n     */\n    this.publishTime = new precise_date_1.PreciseDate(message.publishTime);\n    /**\n     * The time at which the message was recieved by the subscription.\n     *\n     * @name Message#received\n     * @type {number}\n     */\n    this.received = Date.now();\n    this._handled = false;\n    this._length = this.data.length;\n    this._subscriber = sub;\n  }\n  /**\n   * The length of the message data.\n   *\n   * @type {number}\n   */\n  get length() {\n    return this._length;\n  }\n  /**\n   * Sets this message's exactly once delivery acks to permanent failure. This is\n   * meant for internal library use only.\n   *\n   * @private\n   */\n  ackFailed(error) {\n    this._ackFailed = error;\n  }\n  /**\n   * Acknowledges the message.\n   *\n   * @example\n   * ```\n   * subscription.on('message', message => {\n   *   message.ack();\n   * });\n   * ```\n   */\n  ack() {\n    if (!this._handled) {\n      this._handled = true;\n      this._subscriber.ack(this);\n    }\n  }\n  /**\n   * Acknowledges the message, expecting a response (for exactly-once delivery subscriptions).\n   * If exactly-once delivery is not enabled, this will immediately resolve successfully.\n   *\n   * @example\n   * ```\n   * subscription.on('message', async (message) => {\n   *   const response = await message.ackWithResponse();\n   * });\n   * ```\n   */\n  async ackWithResponse() {\n    if (!this._subscriber.isExactlyOnceDelivery) {\n      this.ack();\n      return exports.AckResponses.Success;\n    }\n    if (this._ackFailed) {\n      throw this._ackFailed;\n    }\n    if (!this._handled) {\n      this._handled = true;\n      try {\n        return await this._subscriber.ackWithResponse(this);\n      } catch (e) {\n        this.ackFailed(e);\n        throw e;\n      }\n    } else {\n      return exports.AckResponses.Invalid;\n    }\n  }\n  /**\n   * Modifies the ack deadline.\n   *\n   * @param {number} deadline The number of seconds to extend the deadline.\n   * @private\n   */\n  modAck(deadline) {\n    if (!this._handled) {\n      this._subscriber.modAck(this, deadline);\n    }\n  }\n  /**\n   * Modifies the ack deadline, expecting a response (for exactly-once delivery subscriptions).\n   * If exactly-once delivery is not enabled, this will immediately resolve successfully.\n   *\n   * @param {number} deadline The number of seconds to extend the deadline.\n   * @private\n   */\n  async modAckWithResponse(deadline) {\n    if (!this._subscriber.isExactlyOnceDelivery) {\n      this.modAck(deadline);\n      return exports.AckResponses.Success;\n    }\n    if (this._ackFailed) {\n      throw this._ackFailed;\n    }\n    if (!this._handled) {\n      try {\n        return await this._subscriber.modAckWithResponse(this, deadline);\n      } catch (e) {\n        this.ackFailed(e);\n        throw e;\n      }\n    } else {\n      return exports.AckResponses.Invalid;\n    }\n  }\n  /**\n   * Removes the message from our inventory and schedules it to be redelivered.\n   *\n   * @example\n   * ```\n   * subscription.on('message', message => {\n   *   message.nack();\n   * });\n   * ```\n   */\n  nack() {\n    if (!this._handled) {\n      this._handled = true;\n      this._subscriber.nack(this);\n    }\n  }\n  /**\n   * Removes the message from our inventory and schedules it to be redelivered,\n   * with the modAck response being returned (for exactly-once delivery subscriptions).\n   * If exactly-once delivery is not enabled, this will immediately resolve successfully.\n   *\n   * @example\n   * ```\n   * subscription.on('message', async (message) => {\n   *   const response = await message.nackWithResponse();\n   * });\n   * ```\n   */\n  async nackWithResponse() {\n    if (!this._subscriber.isExactlyOnceDelivery) {\n      this.nack();\n      return exports.AckResponses.Success;\n    }\n    if (this._ackFailed) {\n      throw this._ackFailed;\n    }\n    if (!this._handled) {\n      this._handled = true;\n      try {\n        return await this._subscriber.nackWithResponse(this);\n      } catch (e) {\n        this.ackFailed(e);\n        throw e;\n      }\n    } else {\n      return exports.AckResponses.Invalid;\n    }\n  }\n}\nexports.Message = Message;\nconst minAckDeadlineForExactlyOnceDelivery = temporal_1.Duration.from({\n  seconds: 60\n});\n/**\n * Subscriber class is used to manage all message related functionality.\n *\n * @private\n * @class\n *\n * @param {Subscription} subscription The corresponding subscription.\n * @param {SubscriberOptions} options The subscriber options.\n */\nclass Subscriber extends events_1.EventEmitter {\n  constructor(subscription, options = {}) {\n    super();\n    this.ackDeadline = default_options_1.defaultOptions.subscription.ackDeadline;\n    this.maxMessages = default_options_1.defaultOptions.subscription.maxOutstandingMessages;\n    this.maxBytes = default_options_1.defaultOptions.subscription.maxOutstandingBytes;\n    this.useLegacyFlowControl = false;\n    this.isOpen = false;\n    this._useOpentelemetry = false;\n    this._histogram = new histogram_1.Histogram({\n      min: 10,\n      max: 600\n    });\n    this._latencies = new histogram_1.Histogram();\n    this._subscription = subscription;\n    this.setOptions(options);\n  }\n  /**\n   * Update our ack extension time that will be used by the lease manager\n   * for sending modAcks.\n   *\n   * Should not be called from outside this class, except for unit tests.\n   *\n   * @param {number} [ackTimeSeconds] The number of seconds that the last\n   *   ack took after the message was received. If this is undefined, then\n   *   we won't update the histogram, but we will still recalculate the\n   *   ackDeadline based on the situation.\n   *\n   * @private\n   */\n  updateAckDeadline(ackTimeSeconds) {\n    // Start with the value we already have.\n    let ackDeadline = this.ackDeadline;\n    // If we got an ack time reading, update the histogram (and ackDeadline).\n    if (ackTimeSeconds) {\n      this._histogram.add(ackTimeSeconds);\n      ackDeadline = this._histogram.percentile(99);\n    }\n    // Grab our current min/max deadline values, based on whether exactly-once\n    // delivery is enabled, and the defaults.\n    const [minDeadline, maxDeadline] = this.getMinMaxDeadlines();\n    if (minDeadline) {\n      ackDeadline = Math.max(ackDeadline, minDeadline.totalOf('second'));\n    }\n    if (maxDeadline) {\n      ackDeadline = Math.min(ackDeadline, maxDeadline.totalOf('second'));\n    }\n    // Set the bounded result back.\n    this.ackDeadline = ackDeadline;\n  }\n  getMinMaxDeadlines() {\n    var _a, _b;\n    // If this is an exactly-once delivery subscription, and the user\n    // didn't set their own minimum ack periods, set it to the default\n    // for exactly-once delivery.\n    const defaultMinDeadline = this.isExactlyOnceDelivery ? minAckDeadlineForExactlyOnceDelivery : default_options_1.defaultOptions.subscription.minAckDeadline;\n    const defaultMaxDeadline = default_options_1.defaultOptions.subscription.maxAckDeadline;\n    // Pull in any user-set min/max.\n    const minDeadline = (_a = this._options.minAckDeadline) !== null && _a !== void 0 ? _a : defaultMinDeadline;\n    const maxDeadline = (_b = this._options.maxAckDeadline) !== null && _b !== void 0 ? _b : defaultMaxDeadline;\n    return [minDeadline, maxDeadline];\n  }\n  /**\n   * Returns true if an exactly-once delivery subscription has been detected.\n   *\n   * @private\n   */\n  get isExactlyOnceDelivery() {\n    if (!this.subscriptionProperties) {\n      return false;\n    }\n    return !!this.subscriptionProperties.exactlyOnceDeliveryEnabled;\n  }\n  /**\n   * Sets our subscription properties from incoming messages.\n   *\n   * @param {SubscriptionProperties} subscriptionProperties The new properties.\n   * @private\n   */\n  setSubscriptionProperties(subscriptionProperties) {\n    const previouslyEnabled = this.isExactlyOnceDelivery;\n    this.subscriptionProperties = subscriptionProperties;\n    // Update ackDeadline in case the flag switched.\n    if (previouslyEnabled !== this.isExactlyOnceDelivery) {\n      this.updateAckDeadline();\n      // For exactly-once delivery, make sure the subscription ack deadline is 60.\n      // (Otherwise fall back to the default of 10 seconds.)\n      const subscriptionAckDeadlineSeconds = this.isExactlyOnceDelivery ? 60 : 10;\n      this._stream.setStreamAckDeadline(temporal_1.Duration.from({\n        seconds: subscriptionAckDeadlineSeconds\n      }));\n    }\n  }\n  /**\n   * The 99th percentile of request latencies.\n   *\n   * @type {number}\n   * @private\n   */\n  get modAckLatency() {\n    const latency = this._latencies.percentile(99);\n    let bufferTime = 0;\n    if (this._modAcks) {\n      bufferTime = this._modAcks.maxMilliseconds;\n    }\n    return latency * 1000 + bufferTime;\n  }\n  /**\n   * The full name of the Subscription.\n   *\n   * @type {string}\n   * @private\n   */\n  get name() {\n    if (!this._name) {\n      const {\n        name,\n        projectId\n      } = this._subscription;\n      this._name = (0, projectify_1.replaceProjectIdToken)(name, projectId);\n    }\n    return this._name;\n  }\n  /**\n   * Acknowledges the supplied message.\n   *\n   * @param {Message} message The message to acknowledge.\n   * @returns {Promise<void>}\n   * @private\n   */\n  async ack(message) {\n    const ackTimeSeconds = (Date.now() - message.received) / 1000;\n    this.updateAckDeadline(ackTimeSeconds);\n    // Ignore this in this version of the method (but hook catch\n    // to avoid unhandled exceptions).\n    const resultPromise = this._acks.add(message);\n    resultPromise.catch(() => {});\n    await this._acks.onFlush();\n    this._inventory.remove(message);\n  }\n  /**\n   * Acknowledges the supplied message, expecting a response (for exactly\n   * once subscriptions).\n   *\n   * @param {Message} message The message to acknowledge.\n   * @returns {Promise<AckResponse>}\n   * @private\n   */\n  async ackWithResponse(message) {\n    const ackTimeSeconds = (Date.now() - message.received) / 1000;\n    this.updateAckDeadline(ackTimeSeconds);\n    await this._acks.add(message);\n    this._inventory.remove(message);\n    // No exception means Success.\n    return exports.AckResponses.Success;\n  }\n  /**\n   * Closes the subscriber. The returned promise will resolve once any pending\n   * acks/modAcks are finished.\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async close() {\n    if (!this.isOpen) {\n      return;\n    }\n    this.isOpen = false;\n    this._stream.destroy();\n    this._inventory.clear();\n    await this._waitForFlush();\n    this.emit('close');\n    this._acks.close();\n    this._modAcks.close();\n  }\n  /**\n   * Gets the subscriber client instance.\n   *\n   * @returns {Promise<object>}\n   * @private\n   */\n  async getClient() {\n    const pubsub = this._subscription.pubsub;\n    const [client] = await (0, promisify_1.promisify)(pubsub.getClient_).call(pubsub, {\n      client: 'SubscriberClient'\n    });\n    return client;\n  }\n  /**\n   * Modifies the acknowledge deadline for the provided message.\n   *\n   * @param {Message} message The message to modify.\n   * @param {number} deadline The deadline.\n   * @returns {Promise<void>}\n   * @private\n   */\n  async modAck(message, deadline) {\n    const startTime = Date.now();\n    const responsePromise = this._modAcks.add(message, deadline);\n    responsePromise.catch(() => {});\n    await this._modAcks.onFlush();\n    const latency = (Date.now() - startTime) / 1000;\n    this._latencies.add(latency);\n  }\n  /**\n   * Modifies the acknowledge deadline for the provided message, expecting\n   * a reply (for exactly-once delivery subscriptions).\n   *\n   * @param {Message} message The message to modify.\n   * @param {number} deadline The deadline.\n   * @returns {Promise<AckResponse>}\n   * @private\n   */\n  async modAckWithResponse(message, deadline) {\n    const startTime = Date.now();\n    await this._modAcks.add(message, deadline);\n    const latency = (Date.now() - startTime) / 1000;\n    this._latencies.add(latency);\n    // No exception means Success.\n    return exports.AckResponses.Success;\n  }\n  /**\n   * Modfies the acknowledge deadline for the provided message and then removes\n   * it from our inventory.\n   *\n   * @param {Message} message The message.\n   * @return {Promise<void>}\n   * @private\n   */\n  async nack(message) {\n    await this.modAck(message, 0);\n    this._inventory.remove(message);\n  }\n  /**\n   * Modfies the acknowledge deadline for the provided message and then removes\n   * it from our inventory, expecting a response from modAck (for\n   * exactly-once delivery subscriptions).\n   *\n   * @param {Message} message The message.\n   * @return {Promise<AckResponse>}\n   * @private\n   */\n  async nackWithResponse(message) {\n    return await this.modAckWithResponse(message, 0);\n  }\n  /**\n   * Starts pulling messages.\n   * @private\n   */\n  open() {\n    const {\n      batching,\n      flowControl,\n      streamingOptions\n    } = this._options;\n    this._acks = new message_queues_1.AckQueue(this, batching);\n    this._modAcks = new message_queues_1.ModAckQueue(this, batching);\n    this._inventory = new lease_manager_1.LeaseManager(this, flowControl);\n    this._stream = new message_stream_1.MessageStream(this, streamingOptions);\n    this._stream.on('error', err => this.emit('error', err)).on('debug', msg => this.emit('debug', msg)).on('data', data => this._onData(data)).once('close', () => this.close());\n    this._inventory.on('full', () => this._stream.pause()).on('free', () => this._stream.resume());\n    this._stream.start().catch(err => {\n      this.emit('error', err);\n      this.close();\n    });\n    this.isOpen = true;\n  }\n  /**\n   * Sets subscriber options.\n   *\n   * @param {SubscriberOptions} options The options.\n   * @private\n   */\n  setOptions(options) {\n    this._options = options;\n    this._useOpentelemetry = options.enableOpenTelemetryTracing || false;\n    // The user-set ackDeadline value basically pegs the extension time.\n    // We'll emulate it by overwriting min/max.\n    const passedAckDeadline = options.ackDeadline;\n    if (passedAckDeadline !== undefined) {\n      this.ackDeadline = passedAckDeadline;\n      options.minAckDeadline = temporal_1.Duration.from({\n        seconds: passedAckDeadline\n      });\n      options.maxAckDeadline = temporal_1.Duration.from({\n        seconds: passedAckDeadline\n      });\n    }\n    this.useLegacyFlowControl = options.useLegacyFlowControl || false;\n    if (options.flowControl) {\n      this.maxMessages = options.flowControl.maxMessages || default_options_1.defaultOptions.subscription.maxOutstandingMessages;\n      this.maxBytes = options.flowControl.maxBytes || default_options_1.defaultOptions.subscription.maxOutstandingBytes;\n      // In the event that the user has specified the maxMessages option, we\n      // want to make sure that the maxStreams option isn't higher.\n      // It doesn't really make sense to open 5 streams if the user only wants\n      // 1 message at a time.\n      if (!options.streamingOptions) {\n        options.streamingOptions = {};\n      }\n      const {\n        maxStreams = default_options_1.defaultOptions.subscription.maxStreams\n      } = options.streamingOptions;\n      options.streamingOptions.maxStreams = Math.min(maxStreams, this.maxMessages);\n    }\n  }\n  /**\n   * Constructs an OpenTelemetry span from the incoming message.\n   *\n   * @param {Message} message One of the received messages\n   * @private\n   */\n  _constructSpan(message) {\n    // Handle cases where OpenTelemetry is disabled or no span context was sent through message\n    if (!this._useOpentelemetry || !message.attributes || !message.attributes['googclient_OpenTelemetrySpanContext']) {\n      return undefined;\n    }\n    const spanValue = message.attributes['googclient_OpenTelemetrySpanContext'];\n    const parentSpanContext = spanValue ? JSON.parse(spanValue) : undefined;\n    const spanAttributes = {\n      // Original span attributes\n      ackId: message.ackId,\n      deliveryAttempt: message.deliveryAttempt,\n      //\n      // based on https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/messaging.md#topic-with-multiple-consumers\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_SYSTEM]: 'pubsub',\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_OPERATION]: 'process',\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION]: this.name,\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION_KIND]: 'topic',\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_MESSAGE_ID]: message.id,\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_PROTOCOL]: 'pubsub',\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES]: message.data.length,\n      // Not in Opentelemetry semantic convention but mimics naming\n      'messaging.pubsub.received_at': message.received,\n      'messaging.pubsub.acknowlege_id': message.ackId,\n      'messaging.pubsub.delivery_attempt': message.deliveryAttempt\n    };\n    // Subscriber spans should always have a publisher span as a parent.\n    // Return undefined if no parent is provided\n    const spanName = `${this.name} process`;\n    const span = parentSpanContext ? (0, opentelemetry_tracing_1.createSpan)(spanName.trim(), api_1.SpanKind.CONSUMER, spanAttributes, parentSpanContext) : undefined;\n    return span;\n  }\n  /**\n   * Callback to be invoked when a new message is available.\n   *\n   * New messages will be added to the subscribers inventory, which in turn will\n   * automatically extend the messages ack deadline until either:\n   *   a. the user acks/nacks it\n   *   b. the maxExtension option is hit\n   *\n   * If the message puts us at/over capacity, then we'll pause our message\n   * stream until we've freed up some inventory space.\n   *\n   * New messages must immediately issue a ModifyAckDeadline request\n   * (aka receipt) to confirm with the backend that we did infact receive the\n   * message and its ok to start ticking down on the deadline.\n   *\n   * @private\n   */\n  _onData(response) {\n    // Grab the subscription properties for exactly-once delivery and ordering flags.\n    if (response.subscriptionProperties) {\n      this.setSubscriptionProperties(response.subscriptionProperties);\n    }\n    const {\n      receivedMessages\n    } = response;\n    for (const data of receivedMessages) {\n      const message = new Message(this, data);\n      const span = this._constructSpan(message);\n      if (this.isOpen) {\n        if (this.isExactlyOnceDelivery) {\n          // For exactly-once delivery, we must validate that we got a valid\n          // lease on the message before actually leasing it.\n          message.modAckWithResponse(this.ackDeadline).then(() => {\n            this._inventory.add(message);\n          }).catch(() => {\n            // Temporary failures will retry, so if an error reaches us\n            // here, that means a permanent failure. Silently drop these.\n            this._discardMessage(message);\n          });\n        } else {\n          message.modAck(this.ackDeadline);\n          this._inventory.add(message);\n        }\n      } else {\n        message.nack();\n      }\n      if (span) {\n        span.end();\n      }\n    }\n  }\n  // Internal: This is here to provide a hook for unit testing, at least for now.\n  _discardMessage(message) {\n    message;\n  }\n  /**\n   * Returns a promise that will resolve once all pending requests have settled.\n   *\n   * @private\n   *\n   * @returns {Promise}\n   */\n  async _waitForFlush() {\n    const promises = [];\n    if (this._acks.numPendingRequests) {\n      promises.push(this._acks.onFlush());\n      this._acks.flush();\n    }\n    if (this._modAcks.numPendingRequests) {\n      promises.push(this._modAcks.onFlush());\n      this._modAcks.flush();\n    }\n    if (this._acks.numInFlightRequests) {\n      promises.push(this._acks.onDrain());\n    }\n    if (this._modAcks.numInFlightRequests) {\n      promises.push(this._modAcks.onDrain());\n    }\n    await Promise.all(promises);\n  }\n}\nexports.Subscriber = Subscriber;","map":{"version":3,"names":["precise_date_1","require","projectify_1","promisify_1","events_1","api_1","semantic_conventions_1","histogram_1","lease_manager_1","message_queues_1","message_stream_1","default_options_1","opentelemetry_tracing_1","temporal_1","exports","AckResponses","PermissionDenied","FailedPrecondition","Success","Invalid","Other","AckError","Error","constructor","errorCode","message","finalMessage","Message","sub","ackId","deliveryAttempt","attributes","data","Number","id","messageId","orderingKey","publishTime","PreciseDate","received","Date","now","_handled","_length","length","_subscriber","ackFailed","error","_ackFailed","ack","ackWithResponse","isExactlyOnceDelivery","e","modAck","deadline","modAckWithResponse","nack","nackWithResponse","minAckDeadlineForExactlyOnceDelivery","Duration","from","seconds","Subscriber","EventEmitter","subscription","options","ackDeadline","defaultOptions","maxMessages","maxOutstandingMessages","maxBytes","maxOutstandingBytes","useLegacyFlowControl","isOpen","_useOpentelemetry","_histogram","Histogram","min","max","_latencies","_subscription","setOptions","updateAckDeadline","ackTimeSeconds","add","percentile","minDeadline","maxDeadline","getMinMaxDeadlines","Math","totalOf","defaultMinDeadline","minAckDeadline","defaultMaxDeadline","maxAckDeadline","_a","_options","_b","subscriptionProperties","exactlyOnceDeliveryEnabled","setSubscriptionProperties","previouslyEnabled","subscriptionAckDeadlineSeconds","_stream","setStreamAckDeadline","modAckLatency","latency","bufferTime","_modAcks","maxMilliseconds","name","_name","projectId","replaceProjectIdToken","resultPromise","_acks","catch","onFlush","_inventory","remove","close","destroy","clear","_waitForFlush","emit","getClient","pubsub","client","promisify","getClient_","call","startTime","responsePromise","open","batching","flowControl","streamingOptions","AckQueue","ModAckQueue","LeaseManager","MessageStream","on","err","msg","_onData","once","pause","resume","start","enableOpenTelemetryTracing","passedAckDeadline","undefined","maxStreams","_constructSpan","spanValue","parentSpanContext","JSON","parse","spanAttributes","SemanticAttributes","MESSAGING_SYSTEM","MESSAGING_OPERATION","MESSAGING_DESTINATION","MESSAGING_DESTINATION_KIND","MESSAGING_MESSAGE_ID","MESSAGING_PROTOCOL","MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES","spanName","span","createSpan","trim","SpanKind","CONSUMER","response","receivedMessages","then","_discardMessage","end","promises","numPendingRequests","push","flush","numInFlightRequests","onDrain","Promise","all"],"sources":["../../src/subscriber.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}