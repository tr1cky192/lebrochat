{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageStream = exports.ChannelError = exports.StatusError = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst google_gax_1 = require(\"google-gax\");\nconst isStreamEnded = require(\"is-stream-ended\");\nconst stream_1 = require(\"stream\");\nconst pull_retry_1 = require(\"./pull-retry\");\nconst default_options_1 = require(\"./default-options\");\nconst temporal_1 = require(\"./temporal\");\nconst exponential_retry_1 = require(\"./exponential-retry\");\nconst debug_1 = require(\"./debug\");\n/*!\n * Frequency to ping streams.\n */\nconst KEEP_ALIVE_INTERVAL = 30000;\n/*!\n * Deadline for the stream.\n */\nconst PULL_TIMEOUT = require('./v1/subscriber_client_config.json').interfaces['google.pubsub.v1.Subscriber'].methods.StreamingPull.timeout_millis;\n/*!\n * default stream options\n */\nconst DEFAULT_OPTIONS = {\n  highWaterMark: 0,\n  maxStreams: default_options_1.defaultOptions.subscription.maxStreams,\n  timeout: 300000,\n  retryMinBackoff: temporal_1.Duration.from({\n    millis: 100\n  }),\n  retryMaxBackoff: temporal_1.Duration.from({\n    seconds: 60\n  })\n};\n/**\n * Error wrapper for gRPC status objects.\n *\n * @class\n *\n * @param {object} status The gRPC status object.\n */\nclass StatusError extends Error {\n  constructor(status) {\n    super(status.details);\n    this.code = status.code;\n    this.details = status.details;\n    this.metadata = status.metadata;\n  }\n}\nexports.StatusError = StatusError;\n/**\n * Error thrown when we fail to open a channel for the message stream.\n *\n * @class\n *\n * @param {Error} err The original error.\n */\nclass ChannelError extends Error {\n  constructor(err) {\n    super(`Failed to connect to channel. Reason: ${process.env.DEBUG_GRPC ? err.stack : err.message}`);\n    this.code = err.message.includes('deadline') ? google_gax_1.grpc.status.DEADLINE_EXCEEDED : google_gax_1.grpc.status.UNKNOWN;\n    this.details = err.message;\n    this.metadata = new google_gax_1.grpc.Metadata();\n  }\n}\nexports.ChannelError = ChannelError;\n/**\n * Streaming class used to manage multiple StreamingPull requests.\n *\n * @private\n * @class\n *\n * @param {Subscriber} sub The parent subscriber.\n * @param {MessageStreamOptions} [options] The message stream options.\n */\nclass MessageStream extends stream_1.PassThrough {\n  constructor(sub, options = {}) {\n    options = Object.assign({}, DEFAULT_OPTIONS, options);\n    super({\n      objectMode: true,\n      highWaterMark: options.highWaterMark\n    });\n    this._options = options;\n    this._retrier = new exponential_retry_1.ExponentialRetry(options.retryMinBackoff,\n    // Filled by DEFAULT_OPTIONS\n    options.retryMaxBackoff);\n    this._streams = [];\n    for (let i = 0; i < options.maxStreams; i++) {\n      this._streams.push({});\n    }\n    this._subscriber = sub;\n  }\n  /**\n   * Actually starts the stream setup and subscription pulls.\n   * This is separated so that others can properly wait on the promise.\n   *\n   * @private\n   */\n  async start() {\n    await this._fillStreamPool();\n    this._keepAliveHandle = setInterval(() => this._keepAlive(), KEEP_ALIVE_INTERVAL);\n    this._keepAliveHandle.unref();\n  }\n  /**\n   * Updates the stream ack deadline with the server.\n   *\n   * @param {Duration} deadline The new deadline value to set.\n   */\n  setStreamAckDeadline(deadline) {\n    const request = {\n      streamAckDeadlineSeconds: deadline.totalOf('second')\n    };\n    for (const tracker of this._streams) {\n      // We don't need a callback on this one, it's advisory.\n      if (tracker.stream) {\n        tracker.stream.write(request);\n      }\n    }\n  }\n  /**\n   * Destroys the stream and any underlying streams.\n   *\n   * @param {error?} error An error to emit, if any.\n   * @param {Function} callback Callback for completion of any destruction.\n   * @private\n   */\n  _destroy(error, callback) {\n    if (this._keepAliveHandle) {\n      clearInterval(this._keepAliveHandle);\n    }\n    this._retrier.close();\n    for (let i = 0; i < this._streams.length; i++) {\n      const tracker = this._streams[i];\n      if (tracker.stream) {\n        this._removeStream(i);\n      }\n    }\n    callback(error);\n  }\n  /**\n   * Adds a StreamingPull stream to the combined stream.\n   *\n   * @private\n   *\n   * @param {stream} stream The StreamingPull stream.\n   */\n  _replaceStream(index, stream) {\n    this._removeStream(index);\n    this._setHighWaterMark(stream);\n    const tracker = this._streams[index];\n    tracker.stream = stream;\n    tracker.receivedStatus = false;\n    stream.on('error', err => this._onError(index, err)).once('status', status => this._onStatus(index, status)).on('data', data => this._onData(index, data));\n  }\n  _onData(index, data) {\n    // Mark this stream as alive again. (reset backoff)\n    const tracker = this._streams[index];\n    this._retrier.reset(tracker);\n    this.emit('data', data);\n  }\n  /**\n   * Attempts to create and cache the desired number of StreamingPull requests.\n   * gRPC does not supply a way to confirm that a stream is connected, so our\n   * best bet is to open the streams and use the client.waitForReady() method to\n   * confirm everything is ok.\n   *\n   * @private\n   *\n   * @returns {Promise}\n   */\n  async _fillStreamPool() {\n    if (this.destroyed) {\n      return;\n    }\n    let client;\n    try {\n      client = await this._getClient();\n    } catch (e) {\n      const err = e;\n      this.destroy(err);\n    }\n    const all = [];\n    for (let i = 0; i < this._streams.length; i++) {\n      all.push(this._fillOne(i, client));\n    }\n    await Promise.all(all);\n    try {\n      await this._waitForClientReady(client);\n    } catch (e) {\n      const err = e;\n      this.destroy(err);\n    }\n  }\n  async _fillOne(index, client) {\n    if (this.destroyed) {\n      return;\n    }\n    const tracker = this._streams[index];\n    if (tracker.stream) {\n      return;\n    }\n    if (!client) {\n      try {\n        client = await this._getClient();\n      } catch (e) {\n        const err = e;\n        this.destroy(err);\n        return;\n      }\n    }\n    const deadline = Date.now() + PULL_TIMEOUT;\n    const request = {\n      subscription: this._subscriber.name,\n      streamAckDeadlineSeconds: this._subscriber.ackDeadline,\n      maxOutstandingMessages: this._subscriber.useLegacyFlowControl ? 0 : this._subscriber.maxMessages,\n      maxOutstandingBytes: this._subscriber.useLegacyFlowControl ? 0 : this._subscriber.maxBytes\n    };\n    const stream = client.streamingPull({\n      deadline\n    });\n    this._replaceStream(index, stream);\n    stream.write(request);\n  }\n  /**\n   * It is critical that we keep as few `PullResponse` objects in memory as\n   * possible to reduce the number of potential redeliveries. Because of this we\n   * want to bypass gax for StreamingPull requests to avoid creating a Duplexify\n   * stream, doing so essentially doubles the size of our readable buffer.\n   *\n   * @private\n   *\n   * @returns {Promise.<object>}\n   */\n  async _getClient() {\n    const client = await this._subscriber.getClient();\n    client.initialize();\n    return client.subscriberStub;\n  }\n  /**\n   * Since we do not use the streams to ack/modAck messages, they will close\n   * by themselves unless we periodically send empty messages.\n   *\n   * @private\n   */\n  _keepAlive() {\n    this._streams.forEach(tracker => {\n      // It's possible that a status event fires off (signaling the rpc being\n      // closed) but the stream hasn't drained yet. Writing to such a stream will\n      // result in a `write after end` error.\n      if (!tracker.receivedStatus && tracker.stream) {\n        tracker.stream.write({});\n      }\n    });\n  }\n  // Returns the number of tracked streams that contain an actual stream (good or not).\n  _activeStreams() {\n    return this._streams.reduce((p, t) => (t.stream ? 1 : 0) + p, 0);\n  }\n  /**\n   * Once the stream has nothing left to read, we'll remove it and attempt to\n   * refill our stream pool if needed.\n   *\n   * @private\n   *\n   * @param {number} index The ended stream.\n   * @param {object} status The stream status.\n   */\n  _onEnd(index, status) {\n    this._removeStream(index);\n    if (pull_retry_1.PullRetry.retry(status)) {\n      this.emit('debug', new debug_1.DebugMessage(`Subscriber stream ${index} has ended with status ${status.code}; will be retried.`));\n      if (pull_retry_1.PullRetry.resetFailures(status)) {\n        this._retrier.reset(this._streams[index]);\n      }\n      this._retrier.retryLater(this._streams[index], () => {\n        this._fillOne(index);\n      });\n    } else if (this._activeStreams() === 0) {\n      this.emit('debug', new debug_1.DebugMessage(`Subscriber stream ${index} has ended with status ${status.code}; will not be retried.`));\n      // No streams left, and nothing to retry.\n      this.destroy(new StatusError(status));\n    }\n  }\n  /**\n   * gRPC will usually emit a status as a ServiceError via `error` event before\n   * it emits the status itself. In order to cut back on emitted errors, we'll\n   * wait a tick on error and ignore it if the status has been received.\n   *\n   * @private\n   *\n   * @param {number} index The stream that errored.\n   * @param {Error} err The error.\n   */\n  async _onError(index, err) {\n    await (0, promisify_1.promisify)(process.nextTick)();\n    const code = err.code;\n    const tracker = this._streams[index];\n    const receivedStatus = !tracker.stream || tracker.stream && !tracker.receivedStatus;\n    if (typeof code !== 'number' || !receivedStatus) {\n      this.emit('error', err);\n    }\n  }\n  /**\n   * gRPC streams will emit a status event once the connection has been\n   * terminated. This is preferable to end/close events because we'll receive\n   * information as to why the stream closed and if it is safe to open another.\n   *\n   * @private\n   *\n   * @param {stream} stream The stream that was closed.\n   * @param {object} status The status message stating why it was closed.\n   */\n  _onStatus(index, status) {\n    if (this.destroyed) {\n      return;\n    }\n    const tracker = this._streams[index];\n    tracker.receivedStatus = true;\n    if (!tracker.stream) {\n      // This shouldn't really happen, but in case wires get crossed.\n      return;\n    }\n    if (isStreamEnded(tracker.stream)) {\n      this._onEnd(index, status);\n    } else {\n      tracker.stream.once('end', () => this._onEnd(index, status));\n      tracker.stream.push(null);\n    }\n  }\n  /**\n   * Removes a stream from the combined stream.\n   *\n   * @private\n   *\n   * @param {number} index The stream to remove.\n   */\n  _removeStream(index) {\n    const tracker = this._streams[index];\n    if (tracker.stream) {\n      tracker.stream.unpipe(this);\n      tracker.stream.cancel();\n      tracker.stream = undefined;\n      tracker.receivedStatus = undefined;\n    }\n  }\n  /**\n   * Neither gRPC nor gax allow for the highWaterMark option to be specified.\n   * However using the default value (16) it is possible to end up with a lot of\n   * PullResponse objects stored in internal buffers. If this were to happen\n   * and the client were slow to process messages, we could potentially see a\n   * very large number of redeliveries happen before the messages even made it\n   * to the client.\n   *\n   * @private\n   *\n   * @param {Duplex} stream The duplex stream to adjust the\n   *     highWaterMarks for.\n   */\n  _setHighWaterMark(stream) {\n    stream._readableState.highWaterMark = this._options.highWaterMark;\n  }\n  /**\n   * Promisified version of gRPC's Client#waitForReady function.\n   *\n   * @private\n   *\n   * @param {object} client The gRPC client to wait for.\n   * @returns {Promise}\n   */\n  async _waitForClientReady(client) {\n    const deadline = Date.now() + this._options.timeout;\n    try {\n      await (0, promisify_1.promisify)(client.waitForReady).call(client, deadline);\n    } catch (e) {\n      const err = e;\n      throw new ChannelError(err);\n    }\n  }\n}\nexports.MessageStream = MessageStream;","map":{"version":3,"names":["promisify_1","require","google_gax_1","isStreamEnded","stream_1","pull_retry_1","default_options_1","temporal_1","exponential_retry_1","debug_1","KEEP_ALIVE_INTERVAL","PULL_TIMEOUT","interfaces","methods","StreamingPull","timeout_millis","DEFAULT_OPTIONS","highWaterMark","maxStreams","defaultOptions","subscription","timeout","retryMinBackoff","Duration","from","millis","retryMaxBackoff","seconds","StatusError","Error","constructor","status","details","code","metadata","exports","ChannelError","err","process","env","DEBUG_GRPC","stack","message","includes","grpc","DEADLINE_EXCEEDED","UNKNOWN","Metadata","MessageStream","PassThrough","sub","options","Object","assign","objectMode","_options","_retrier","ExponentialRetry","_streams","i","push","_subscriber","start","_fillStreamPool","_keepAliveHandle","setInterval","_keepAlive","unref","setStreamAckDeadline","deadline","request","streamAckDeadlineSeconds","totalOf","tracker","stream","write","_destroy","error","callback","clearInterval","close","length","_removeStream","_replaceStream","index","_setHighWaterMark","receivedStatus","on","_onError","once","_onStatus","data","_onData","reset","emit","destroyed","client","_getClient","e","destroy","all","_fillOne","Promise","_waitForClientReady","Date","now","name","ackDeadline","maxOutstandingMessages","useLegacyFlowControl","maxMessages","maxOutstandingBytes","maxBytes","streamingPull","getClient","initialize","subscriberStub","forEach","_activeStreams","reduce","p","t","_onEnd","PullRetry","retry","DebugMessage","resetFailures","retryLater","promisify","nextTick","unpipe","cancel","undefined","_readableState","waitForReady","call"],"sources":["../../src/message-stream.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}