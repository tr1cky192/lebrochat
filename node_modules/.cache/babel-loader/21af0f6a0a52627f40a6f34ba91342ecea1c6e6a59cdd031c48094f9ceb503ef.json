{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function MetricsAPI() {}\n  /** Get the singleton instance of the Metrics API */\n  MetricsAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  };\n  /**\n   * Returns the global meter provider.\n   */\n  MetricsAPI.prototype.getMeterProvider = function () {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  };\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  MetricsAPI.prototype.getMeter = function (name, version, options) {\n    return this.getMeterProvider().getMeter(name, version, options);\n  };\n  /** Remove the global meter provider */\n  MetricsAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  };\n  return MetricsAPI;\n}();\nexport { MetricsAPI };","map":{"version":3,"names":["NOOP_METER_PROVIDER","getGlobal","registerGlobal","unregisterGlobal","DiagAPI","API_NAME","MetricsAPI","getInstance","_instance","prototype","setGlobalMeterProvider","provider","instance","getMeterProvider","getMeter","name","version","options","disable"],"sources":["C:\\Users\\Ігор\\clone\\node_modules\\@opentelemetry\\api\\src\\api\\metrics.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from '../metrics/Meter';\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'metrics';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): boolean {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(\n    name: string,\n    version?: string,\n    options?: MeterOptions\n  ): Meter {\n    return this.getMeterProvider().getMeter(name, version, options);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAASA,mBAAmB,QAAQ,8BAA8B;AAClE,SACEC,SAAS,EACTC,cAAc,EACdC,gBAAgB,QACX,0BAA0B;AACjC,SAASC,OAAO,QAAQ,QAAQ;AAEhC,IAAMC,QAAQ,GAAG,SAAS;AAE1B;;;AAGA,IAAAC,UAAA;EAGE;EACA,SAAAA,WAAA,GAAuB;EAEvB;EACcA,UAAA,CAAAC,WAAW,GAAzB;IACE,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAIF,UAAU,EAAE;;IAGnC,OAAO,IAAI,CAACE,SAAS;EACvB,CAAC;EAED;;;;EAIOF,UAAA,CAAAG,SAAA,CAAAC,sBAAsB,GAA7B,UAA8BC,QAAuB;IACnD,OAAOT,cAAc,CAACG,QAAQ,EAAEM,QAAQ,EAAEP,OAAO,CAACQ,QAAQ,EAAE,CAAC;EAC/D,CAAC;EAED;;;EAGON,UAAA,CAAAG,SAAA,CAAAI,gBAAgB,GAAvB;IACE,OAAOZ,SAAS,CAACI,QAAQ,CAAC,IAAIL,mBAAmB;EACnD,CAAC;EAED;;;EAGOM,UAAA,CAAAG,SAAA,CAAAK,QAAQ,GAAf,UACEC,IAAY,EACZC,OAAgB,EAChBC,OAAsB;IAEtB,OAAO,IAAI,CAACJ,gBAAgB,EAAE,CAACC,QAAQ,CAACC,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;EACjE,CAAC;EAED;EACOX,UAAA,CAAAG,SAAA,CAAAS,OAAO,GAAd;IACEf,gBAAgB,CAACE,QAAQ,EAAED,OAAO,CAACQ,QAAQ,EAAE,CAAC;EAChD,CAAC;EACH,OAAAN,UAAC;AAAD,CAAC,CA7CD"},"metadata":{},"sourceType":"module","externalDependencies":[]}