{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */function () {\n  function NonRecordingSpan(_spanContext) {\n    if (_spanContext === void 0) {\n      _spanContext = INVALID_SPAN_CONTEXT;\n    }\n    this._spanContext = _spanContext;\n  }\n  // Returns a SpanContext.\n  NonRecordingSpan.prototype.spanContext = function () {\n    return this._spanContext;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setStatus = function (_status) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.updateName = function (_name) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.end = function (_endTime) {};\n  // isRecording always returns false for NonRecordingSpan.\n  NonRecordingSpan.prototype.isRecording = function () {\n    return false;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.recordException = function (_exception, _time) {};\n  return NonRecordingSpan;\n}();\nexport { NonRecordingSpan };","map":{"version":3,"names":["INVALID_SPAN_CONTEXT","NonRecordingSpan","_spanContext","prototype","spanContext","setAttribute","_key","_value","setAttributes","_attributes","addEvent","_name","setStatus","_status","updateName","end","_endTime","isRecording","recordException","_exception","_time"],"sources":["C:\\Users\\Ігор\\clone\\node_modules\\@opentelemetry\\api\\src\\trace\\NonRecordingSpan.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA,SAASA,oBAAoB,QAAQ,0BAA0B;AAK/D;;;;;AAKA,IAAAC,gBAAA;EACE,SAAAA,iBACmBC,YAAgD;IAAhD,IAAAA,YAAA;MAAAA,YAAA,GAAAF,oBAAgD;IAAA;IAAhD,KAAAE,YAAY,GAAZA,YAAY;EAC5B;EAEH;EACAD,gBAAA,CAAAE,SAAA,CAAAC,WAAW,GAAX;IACE,OAAO,IAAI,CAACF,YAAY;EAC1B,CAAC;EAED;EACAD,gBAAA,CAAAE,SAAA,CAAAE,YAAY,GAAZ,UAAaC,IAAY,EAAEC,MAAe;IACxC,OAAO,IAAI;EACb,CAAC;EAED;EACAN,gBAAA,CAAAE,SAAA,CAAAK,aAAa,GAAb,UAAcC,WAA2B;IACvC,OAAO,IAAI;EACb,CAAC;EAED;EACAR,gBAAA,CAAAE,SAAA,CAAAO,QAAQ,GAAR,UAASC,KAAa,EAAEF,WAA4B;IAClD,OAAO,IAAI;EACb,CAAC;EAED;EACAR,gBAAA,CAAAE,SAAA,CAAAS,SAAS,GAAT,UAAUC,OAAmB;IAC3B,OAAO,IAAI;EACb,CAAC;EAED;EACAZ,gBAAA,CAAAE,SAAA,CAAAW,UAAU,GAAV,UAAWH,KAAa;IACtB,OAAO,IAAI;EACb,CAAC;EAED;EACAV,gBAAA,CAAAE,SAAA,CAAAY,GAAG,GAAH,UAAIC,QAAoB,GAAS,CAAC;EAElC;EACAf,gBAAA,CAAAE,SAAA,CAAAc,WAAW,GAAX;IACE,OAAO,KAAK;EACd,CAAC;EAED;EACAhB,gBAAA,CAAAE,SAAA,CAAAe,eAAe,GAAf,UAAgBC,UAAqB,EAAEC,KAAiB,GAAS,CAAC;EACpE,OAAAnB,gBAAC;AAAD,CAAC,CA7CD"},"metadata":{},"sourceType":"module","externalDependencies":[]}