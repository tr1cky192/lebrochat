{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PreciseDate = void 0;\nconst FULL_ISO_REG = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d{4,9}Z/;\nconst NO_BIG_INT = 'BigInt only available in Node >= v10.7. Consider using getFullTimeString instead.';\nvar Sign;\n(function (Sign) {\n  Sign[Sign[\"NEGATIVE\"] = -1] = \"NEGATIVE\";\n  Sign[Sign[\"POSITIVE\"] = 1] = \"POSITIVE\";\n  Sign[Sign[\"ZERO\"] = 0] = \"ZERO\";\n})(Sign || (Sign = {}));\n/**\n * The native Date object.\n * @external Date\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date}\n */\n/**\n * @typedef {array} DateTuple\n * @property {number} 0 Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} 1 Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n/**\n * @typedef {object} DateStruct\n * @property {number} seconds Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} nanos Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n/**\n * Date object with nanosecond precision. Supports all standard Date arguments\n * in addition to several custom types as noted below.\n *\n * @class\n * @extends external:Date\n *\n * @param {number|string|bigint|Date|DateTuple|DateStruct} [time] The time\n *     value.\n * @param {...number} [dateFields] Additional date fields (month, date, hours,\n *     minutes, seconds, milliseconds, microseconds, nanoseconds).\n *\n * @example <caption>With a RFC 3339 formatted string.</caption>\n * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n *\n * @example <caption>With a nanosecond timestamp string.</caption>\n * const date = new PreciseDate('1549622069481320032');\n *\n * @example <caption>With a BigInt (requires Node >= v10.7)</caption>\n * const date = new PreciseDate(1549622069481320032n);\n *\n * @example <caption>With a tuple containing seconds and nanoseconds.</caption>\n * const date = new PreciseDate([1549622069, 481320032]);\n *\n * @example <caption>With an object containing `seconds` and `nanos`</caption>\n * const date = new PreciseDate({seconds: 1549622069, nanos: 481320032});\n *\n * @example <caption>Specifiying date fields</caption>\n * const date = new PreciseDate(2018, 5, 14, 41, 11, 34, 123, 874, 321);\n */\nclass PreciseDate extends Date {\n  constructor(time) {\n    super();\n    this._micros = 0;\n    this._nanos = 0;\n    if (time && typeof time !== 'number' && !(time instanceof Date)) {\n      this.setFullTime(PreciseDate.parseFull(time));\n      return;\n    }\n    // eslint-disable-next-line prefer-rest-params\n    const args = Array.from(arguments);\n    const dateFields = args.slice(0, 7);\n    const date = new Date(...dateFields);\n    const nanos = args.length === 9 ? args.pop() : 0;\n    const micros = args.length === 8 ? args.pop() : 0;\n    this.setTime(date.getTime());\n    this.setMicroseconds(micros);\n    this.setNanoseconds(nanos);\n  }\n  /**\n   * Returns the specified date represented in nanoseconds according to\n   * universal time.\n   *\n   * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n   * Use {@link PreciseDate#getFullTimeString} to get the time as a string.\n   *\n   * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n   *\n   * @throws {error} If `BigInt` is unavailable.\n   * @returns {bigint}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.getFullTime());\n   * // expected output: 1549622069481145231n\n   */\n  getFullTime() {\n    if (typeof BigInt !== 'function') {\n      throw new Error(NO_BIG_INT);\n    }\n    return BigInt(this.getFullTimeString());\n  }\n  /**\n   * Returns a string of the specified date represented in nanoseconds according\n   * to universal time.\n   *\n   * @returns {string}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.getFullTimeString());\n   * // expected output: \"1549622069481145231\"\n   */\n  getFullTimeString() {\n    const seconds = this._getSeconds();\n    let nanos = this._getNanos();\n    if (nanos && Math.sign(seconds) === Sign.NEGATIVE) {\n      nanos = 1e9 - nanos;\n    }\n    return `${seconds}${padLeft(nanos, 9)}`;\n  }\n  /**\n   * Returns the microseconds in the specified date according to universal time.\n   *\n   * @returns {number}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145Z');\n   *\n   * console.log(date.getMicroseconds());\n   * // expected output: 145\n   */\n  getMicroseconds() {\n    return this._micros;\n  }\n  /**\n   * Returns the nanoseconds in the specified date according to universal time.\n   *\n   * @returns {number}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.getNanoseconds());\n   * // expected output: 231\n   */\n  getNanoseconds() {\n    return this._nanos;\n  }\n  /**\n   * Sets the microseconds for a specified date according to universal time.\n   *\n   * @param {number} microseconds A number representing the microseconds.\n   * @returns {string} Returns a string representing the nanoseconds in the\n   *     specified date according to universal time.\n   *\n   * @example\n   * const date = new PreciseDate();\n   *\n   * date.setMicroseconds(149);\n   *\n   * console.log(date.getMicroseconds());\n   * // expected output: 149\n   */\n  setMicroseconds(micros) {\n    const abs = Math.abs(micros);\n    let millis = this.getUTCMilliseconds();\n    if (abs >= 1000) {\n      millis += Math.floor(abs / 1000) * Math.sign(micros);\n      micros %= 1000;\n    }\n    if (Math.sign(micros) === Sign.NEGATIVE) {\n      millis -= 1;\n      micros += 1000;\n    }\n    this._micros = micros;\n    this.setUTCMilliseconds(millis);\n    return this.getFullTimeString();\n  }\n  /**\n   * Sets the nanoseconds for a specified date according to universal time.\n   *\n   * @param {number} nanoseconds A number representing the nanoseconds.\n   * @returns {string} Returns a string representing the nanoseconds in the\n   *     specified date according to universal time.\n   *\n   * @example\n   * const date = new PreciseDate();\n   *\n   * date.setNanoseconds(231);\n   *\n   * console.log(date.getNanoseconds());\n   * // expected output: 231\n   */\n  setNanoseconds(nanos) {\n    const abs = Math.abs(nanos);\n    let micros = this._micros;\n    if (abs >= 1000) {\n      micros += Math.floor(abs / 1000) * Math.sign(nanos);\n      nanos %= 1000;\n    }\n    if (Math.sign(nanos) === Sign.NEGATIVE) {\n      micros -= 1;\n      nanos += 1000;\n    }\n    this._nanos = nanos;\n    return this.setMicroseconds(micros);\n  }\n  /**\n   * Sets the PreciseDate object to the time represented by a number of\n   * nanoseconds since January 1, 1970, 00:00:00 UTC.\n   *\n   * @param {bigint|number|string} time Value representing the number of\n   *     nanoseconds since January 1, 1970, 00:00:00 UTC.\n   * @returns {string} Returns a string representing the nanoseconds in the\n   *     specified date according to universal time (effectively, the value of\n   *     the argument).\n   *\n   * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n   *\n   * @example <caption>With a nanosecond string.</caption>\n   * const date = new PreciseDate();\n   * date.setFullTime('1549622069481145231');\n   *\n   * @example <caption>With a BigInt</caption>\n   * date.setFullTime(1549622069481145231n);\n   */\n  setFullTime(time) {\n    if (typeof time !== 'string') {\n      time = time.toString();\n    }\n    const sign = Math.sign(Number(time));\n    time = time.replace(/^-/, '');\n    const seconds = Number(time.substr(0, time.length - 9)) * sign;\n    const nanos = Number(time.substr(-9)) * sign;\n    this.setTime(seconds * 1000);\n    return this.setNanoseconds(nanos);\n  }\n  /**\n   * Sets the PreciseDate object to the time represented by a number of\n   * milliseconds since January 1, 1970, 00:00:00 UTC. Calling this method will\n   * reset both the microseconds and nanoseconds to 0.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime|Date#setTime}\n   *\n   * @param {number} time Value representing the number of milliseconds since\n   *     January 1, 1970, 00:00:00 UTC.\n   * @returns {string} The number of milliseconds between January 1, 1970,\n   *     00:00:00 UTC and the updated date (effectively, the value of the\n   *     argument).\n   */\n  setTime(time) {\n    this._micros = 0;\n    this._nanos = 0;\n    return super.setTime(time);\n  }\n  /**\n   * Returns a string in RFC 3339 format. Unlike the native `Date#toISOString`,\n   * this will return 9 digits to represent sub-second precision.\n   *\n   * @see {@link https://tools.ietf.org/html/rfc3339|RFC 3339}\n   *\n   * @returns {string}\n   *\n   * @example\n   * const date = new PreciseDate(1549622069481145231n);\n   *\n   * console.log(date.toISOString());\n   * // expected output: \"2019-02-08T10:34:29.481145231Z\"\n   */\n  toISOString() {\n    const micros = padLeft(this._micros, 3);\n    const nanos = padLeft(this._nanos, 3);\n    return super.toISOString().replace(/z$/i, `${micros}${nanos}Z`);\n  }\n  /**\n   * Returns an object representing the specified date according to universal\n   * time.\n   *\n   * @see {@link https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#timestamp|google.protobuf.Timestamp}\n   *\n   * @returns {DateStruct}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.toStruct());\n   * // expected output: {seconds: 1549622069, nanos: 481145231}\n   */\n  toStruct() {\n    let seconds = this._getSeconds();\n    const nanos = this._getNanos();\n    const sign = Math.sign(seconds);\n    // These objects are essentially a mirror of protobuf timestamps.\n    // `nanos` must always count forward in time, even if the date is <= Unix\n    // epoch. To do this we just need to count backwards 1 second and return the\n    // nanoseconds as is.\n    if (sign === Sign.NEGATIVE && nanos) {\n      seconds -= 1;\n    }\n    return {\n      seconds,\n      nanos\n    };\n  }\n  /**\n   * Returns a tuple representing the specified date according to universal\n   * time.\n   *\n   * @returns {DateTuple}\n   *\n   * @example\n   * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n   *\n   * console.log(date.toTuple());\n   * // expected output: [1549622069, 481145231]\n   */\n  toTuple() {\n    const {\n      seconds,\n      nanos\n    } = this.toStruct();\n    return [seconds, nanos];\n  }\n  /**\n   * Returns the total number of seconds in the specified date since Unix epoch.\n   * Numbers representing < epoch will be negative.\n   *\n   * @private\n   *\n   * @returns {number}\n   */\n  _getSeconds() {\n    const time = this.getTime();\n    const sign = Math.sign(time);\n    return Math.floor(Math.abs(time) / 1000) * sign;\n  }\n  /**\n   * Returns the sub-second precision of the specified date. This will always be\n   * a positive number.\n   *\n   * @private\n   *\n   * @returns {number}\n   */\n  _getNanos() {\n    const msInNanos = this.getUTCMilliseconds() * 1e6;\n    const microsInNanos = this._micros * 1000;\n    return this._nanos + msInNanos + microsInNanos;\n  }\n  /**\n   * Parses a precise time.\n   *\n   * @static\n   *\n   * @param {string|bigint|DateTuple|DateStruct} time The precise time value.\n   * @returns {string} Returns a string representing the nanoseconds in the\n   *     specified date according to universal time.\n   *\n   * @example <caption>From a RFC 3339 formatted string.</caption>\n   * const time = PreciseDate.parseFull('2019-02-08T10:34:29.481145231Z');\n   * console.log(time); // expected output: \"1549622069481145231\"\n   *\n   * @example <caption>From a nanosecond timestamp string.</caption>\n   * const time = PreciseDate.parseFull('1549622069481145231');\n   * console.log(time); // expected output: \"1549622069481145231\"\n   *\n   * @example <caption>From a BigInt (requires Node >= v10.7)</caption>\n   * const time = PreciseDate.parseFull(1549622069481145231n);\n   * console.log(time); // expected output: \"1549622069481145231\"\n   *\n   * @example <caption>From a tuple.</caption>\n   * const time = PreciseDate.parseFull([1549622069, 481145231]);\n   * console.log(time); // expected output: \"1549622069481145231\"\n   *\n   * @example <caption>From an object.</caption>\n   * const struct = {seconds: 1549622069, nanos: 481145231};\n   * const time = PreciseDate.parseFull(struct);\n   * console.log(time); // expected output: \"1549622069481145231\"\n   */\n  static parseFull(time) {\n    const date = new PreciseDate();\n    if (Array.isArray(time)) {\n      const [seconds, nanos] = time;\n      time = {\n        seconds,\n        nanos\n      };\n    }\n    if (isFullTime(time)) {\n      date.setFullTime(time);\n    } else if (isStruct(time)) {\n      const {\n        seconds,\n        nanos\n      } = parseProto(time);\n      date.setTime(seconds * 1000);\n      date.setNanoseconds(nanos);\n    } else if (isFullISOString(time)) {\n      date.setFullTime(parseFullISO(time));\n    } else {\n      date.setTime(new Date(time).getTime());\n    }\n    return date.getFullTimeString();\n  }\n  /**\n   * Accepts the same number parameters as the PreciseDate constructor, but\n   * treats them as UTC. It returns a string that represents the number of\n   * nanoseconds since January 1, 1970, 00:00:00 UTC.\n   *\n   * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n   *\n   * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n   *\n   * @static\n   *\n   * @throws {error} If `BigInt` is unavailable.\n   *\n   * @param {...number} [dateFields] The date fields.\n   * @returns {bigint}\n   *\n   * @example\n   * const time = PreciseDate.fullUTC(2019, 1, 8, 10, 34, 29, 481, 145, 231);\n   * console.log(time); // expected output: 1549622069481145231n\n   */\n  static fullUTC(...args) {\n    if (typeof BigInt !== 'function') {\n      throw new Error(NO_BIG_INT);\n    }\n    return BigInt(PreciseDate.fullUTCString(...args));\n  }\n  /**\n   * Accepts the same number parameters as the PreciseDate constructor, but\n   * treats them as UTC. It returns a string that represents the number of\n   * nanoseconds since January 1, 1970, 00:00:00 UTC.\n   *\n   * @static\n   *\n   * @param {...number} [dateFields] The date fields.\n   * @returns {string}\n   *\n   * @example\n   * const time = PreciseDate.fullUTCString(2019, 1, 8, 10, 34, 29, 481, 145,\n   * 231); console.log(time); // expected output: '1549622069481145231'\n   */\n  static fullUTCString(...args) {\n    const milliseconds = Date.UTC(...args.slice(0, 7));\n    const date = new PreciseDate(milliseconds);\n    if (args.length === 9) {\n      date.setNanoseconds(args.pop());\n    }\n    if (args.length === 8) {\n      date.setMicroseconds(args.pop());\n    }\n    return date.getFullTimeString();\n  }\n}\nexports.PreciseDate = PreciseDate;\n/**\n * Parses a RFC 3339 formatted string representation of the date, and returns\n * a string representing the nanoseconds since January 1, 1970, 00:00:00.\n *\n * @private\n *\n * @param {string} time The RFC 3339 formatted string.\n * @returns {string}\n */\nfunction parseFullISO(time) {\n  let digits = '0';\n  time = time.replace(/\\.(\\d+)/, ($0, $1) => {\n    digits = $1;\n    return '.000';\n  });\n  const nanos = Number(padRight(digits, 9));\n  const date = new PreciseDate(time);\n  return date.setNanoseconds(nanos);\n}\n/**\n * Normalizes a {@link google.protobuf.Timestamp} object.\n *\n * @private\n *\n * @param {google.protobuf.Timestamp} timestamp The timestamp object.\n * @returns {DateStruct}\n */\nfunction parseProto({\n  seconds = 0,\n  nanos = 0\n}) {\n  if (typeof seconds.toNumber === 'function') {\n    seconds = seconds.toNumber();\n  }\n  seconds = Number(seconds);\n  nanos = Number(nanos);\n  return {\n    seconds,\n    nanos\n  };\n}\n/**\n * Checks to see if time value is specified in nanoseconds. We assume that all\n * BigInt and string timestamps represent nanoseconds.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isFullTime(time) {\n  return typeof time === 'bigint' || typeof time === 'string' && /^\\d+$/.test(time);\n}\n/**\n * Checks to see if time value is a {@link DateStruct}.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isStruct(time) {\n  return typeof time === 'object' && typeof time.seconds !== 'undefined' || typeof time.nanos === 'number';\n}\n/**\n * Checks to see if the time value is a RFC 3339 formatted string.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isFullISOString(time) {\n  return typeof time === 'string' && FULL_ISO_REG.test(time);\n}\n/**\n * Pads a number/string with \"0\" to the left.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\nfunction padLeft(n, min) {\n  const padding = getPadding(n, min);\n  return `${padding}${n}`;\n}\n/**\n * Pads a number/string with \"0\" to the right.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\nfunction padRight(n, min) {\n  const padding = getPadding(n, min);\n  return `${n}${padding}`;\n}\n/**\n * Creates padding based on current size and min size needed.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} [min=3] The min size of the padded string.\n * @returns {string}\n */\nfunction getPadding(n, min) {\n  const size = Math.max(min - n.toString().length, 0);\n  return '0'.repeat(size);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","PreciseDate","FULL_ISO_REG","NO_BIG_INT","Sign","Date","constructor","time","_micros","_nanos","setFullTime","parseFull","args","Array","from","arguments","dateFields","slice","date","nanos","length","pop","micros","setTime","getTime","setMicroseconds","setNanoseconds","getFullTime","BigInt","Error","getFullTimeString","seconds","_getSeconds","_getNanos","Math","sign","NEGATIVE","padLeft","getMicroseconds","getNanoseconds","abs","millis","getUTCMilliseconds","floor","setUTCMilliseconds","toString","Number","replace","substr","toISOString","toStruct","toTuple","msInNanos","microsInNanos","isArray","isFullTime","isStruct","parseProto","isFullISOString","parseFullISO","fullUTC","fullUTCString","milliseconds","UTC","digits","$0","$1","padRight","toNumber","test","n","min","padding","getPadding","size","max","repeat"],"sources":["C:/Users/Ігор/clone/node_modules/@google-cloud/precise-date/build/src/index.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PreciseDate = void 0;\nconst FULL_ISO_REG = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d{4,9}Z/;\nconst NO_BIG_INT = 'BigInt only available in Node >= v10.7. Consider using getFullTimeString instead.';\nvar Sign;\n(function (Sign) {\n    Sign[Sign[\"NEGATIVE\"] = -1] = \"NEGATIVE\";\n    Sign[Sign[\"POSITIVE\"] = 1] = \"POSITIVE\";\n    Sign[Sign[\"ZERO\"] = 0] = \"ZERO\";\n})(Sign || (Sign = {}));\n/**\n * The native Date object.\n * @external Date\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date}\n */\n/**\n * @typedef {array} DateTuple\n * @property {number} 0 Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} 1 Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n/**\n * @typedef {object} DateStruct\n * @property {number} seconds Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} nanos Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n/**\n * Date object with nanosecond precision. Supports all standard Date arguments\n * in addition to several custom types as noted below.\n *\n * @class\n * @extends external:Date\n *\n * @param {number|string|bigint|Date|DateTuple|DateStruct} [time] The time\n *     value.\n * @param {...number} [dateFields] Additional date fields (month, date, hours,\n *     minutes, seconds, milliseconds, microseconds, nanoseconds).\n *\n * @example <caption>With a RFC 3339 formatted string.</caption>\n * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n *\n * @example <caption>With a nanosecond timestamp string.</caption>\n * const date = new PreciseDate('1549622069481320032');\n *\n * @example <caption>With a BigInt (requires Node >= v10.7)</caption>\n * const date = new PreciseDate(1549622069481320032n);\n *\n * @example <caption>With a tuple containing seconds and nanoseconds.</caption>\n * const date = new PreciseDate([1549622069, 481320032]);\n *\n * @example <caption>With an object containing `seconds` and `nanos`</caption>\n * const date = new PreciseDate({seconds: 1549622069, nanos: 481320032});\n *\n * @example <caption>Specifiying date fields</caption>\n * const date = new PreciseDate(2018, 5, 14, 41, 11, 34, 123, 874, 321);\n */\nclass PreciseDate extends Date {\n    constructor(time) {\n        super();\n        this._micros = 0;\n        this._nanos = 0;\n        if (time && typeof time !== 'number' && !(time instanceof Date)) {\n            this.setFullTime(PreciseDate.parseFull(time));\n            return;\n        }\n        // eslint-disable-next-line prefer-rest-params\n        const args = Array.from(arguments);\n        const dateFields = args.slice(0, 7);\n        const date = new Date(...dateFields);\n        const nanos = args.length === 9 ? args.pop() : 0;\n        const micros = args.length === 8 ? args.pop() : 0;\n        this.setTime(date.getTime());\n        this.setMicroseconds(micros);\n        this.setNanoseconds(nanos);\n    }\n    /**\n     * Returns the specified date represented in nanoseconds according to\n     * universal time.\n     *\n     * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n     * Use {@link PreciseDate#getFullTimeString} to get the time as a string.\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @throws {error} If `BigInt` is unavailable.\n     * @returns {bigint}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getFullTime());\n     * // expected output: 1549622069481145231n\n     */\n    getFullTime() {\n        if (typeof BigInt !== 'function') {\n            throw new Error(NO_BIG_INT);\n        }\n        return BigInt(this.getFullTimeString());\n    }\n    /**\n     * Returns a string of the specified date represented in nanoseconds according\n     * to universal time.\n     *\n     * @returns {string}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getFullTimeString());\n     * // expected output: \"1549622069481145231\"\n     */\n    getFullTimeString() {\n        const seconds = this._getSeconds();\n        let nanos = this._getNanos();\n        if (nanos && Math.sign(seconds) === Sign.NEGATIVE) {\n            nanos = 1e9 - nanos;\n        }\n        return `${seconds}${padLeft(nanos, 9)}`;\n    }\n    /**\n     * Returns the microseconds in the specified date according to universal time.\n     *\n     * @returns {number}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145Z');\n     *\n     * console.log(date.getMicroseconds());\n     * // expected output: 145\n     */\n    getMicroseconds() {\n        return this._micros;\n    }\n    /**\n     * Returns the nanoseconds in the specified date according to universal time.\n     *\n     * @returns {number}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getNanoseconds());\n     * // expected output: 231\n     */\n    getNanoseconds() {\n        return this._nanos;\n    }\n    /**\n     * Sets the microseconds for a specified date according to universal time.\n     *\n     * @param {number} microseconds A number representing the microseconds.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example\n     * const date = new PreciseDate();\n     *\n     * date.setMicroseconds(149);\n     *\n     * console.log(date.getMicroseconds());\n     * // expected output: 149\n     */\n    setMicroseconds(micros) {\n        const abs = Math.abs(micros);\n        let millis = this.getUTCMilliseconds();\n        if (abs >= 1000) {\n            millis += Math.floor(abs / 1000) * Math.sign(micros);\n            micros %= 1000;\n        }\n        if (Math.sign(micros) === Sign.NEGATIVE) {\n            millis -= 1;\n            micros += 1000;\n        }\n        this._micros = micros;\n        this.setUTCMilliseconds(millis);\n        return this.getFullTimeString();\n    }\n    /**\n     * Sets the nanoseconds for a specified date according to universal time.\n     *\n     * @param {number} nanoseconds A number representing the nanoseconds.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example\n     * const date = new PreciseDate();\n     *\n     * date.setNanoseconds(231);\n     *\n     * console.log(date.getNanoseconds());\n     * // expected output: 231\n     */\n    setNanoseconds(nanos) {\n        const abs = Math.abs(nanos);\n        let micros = this._micros;\n        if (abs >= 1000) {\n            micros += Math.floor(abs / 1000) * Math.sign(nanos);\n            nanos %= 1000;\n        }\n        if (Math.sign(nanos) === Sign.NEGATIVE) {\n            micros -= 1;\n            nanos += 1000;\n        }\n        this._nanos = nanos;\n        return this.setMicroseconds(micros);\n    }\n    /**\n     * Sets the PreciseDate object to the time represented by a number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * @param {bigint|number|string} time Value representing the number of\n     *     nanoseconds since January 1, 1970, 00:00:00 UTC.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time (effectively, the value of\n     *     the argument).\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @example <caption>With a nanosecond string.</caption>\n     * const date = new PreciseDate();\n     * date.setFullTime('1549622069481145231');\n     *\n     * @example <caption>With a BigInt</caption>\n     * date.setFullTime(1549622069481145231n);\n     */\n    setFullTime(time) {\n        if (typeof time !== 'string') {\n            time = time.toString();\n        }\n        const sign = Math.sign(Number(time));\n        time = time.replace(/^-/, '');\n        const seconds = Number(time.substr(0, time.length - 9)) * sign;\n        const nanos = Number(time.substr(-9)) * sign;\n        this.setTime(seconds * 1000);\n        return this.setNanoseconds(nanos);\n    }\n    /**\n     * Sets the PreciseDate object to the time represented by a number of\n     * milliseconds since January 1, 1970, 00:00:00 UTC. Calling this method will\n     * reset both the microseconds and nanoseconds to 0.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime|Date#setTime}\n     *\n     * @param {number} time Value representing the number of milliseconds since\n     *     January 1, 1970, 00:00:00 UTC.\n     * @returns {string} The number of milliseconds between January 1, 1970,\n     *     00:00:00 UTC and the updated date (effectively, the value of the\n     *     argument).\n     */\n    setTime(time) {\n        this._micros = 0;\n        this._nanos = 0;\n        return super.setTime(time);\n    }\n    /**\n     * Returns a string in RFC 3339 format. Unlike the native `Date#toISOString`,\n     * this will return 9 digits to represent sub-second precision.\n     *\n     * @see {@link https://tools.ietf.org/html/rfc3339|RFC 3339}\n     *\n     * @returns {string}\n     *\n     * @example\n     * const date = new PreciseDate(1549622069481145231n);\n     *\n     * console.log(date.toISOString());\n     * // expected output: \"2019-02-08T10:34:29.481145231Z\"\n     */\n    toISOString() {\n        const micros = padLeft(this._micros, 3);\n        const nanos = padLeft(this._nanos, 3);\n        return super.toISOString().replace(/z$/i, `${micros}${nanos}Z`);\n    }\n    /**\n     * Returns an object representing the specified date according to universal\n     * time.\n     *\n     * @see {@link https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#timestamp|google.protobuf.Timestamp}\n     *\n     * @returns {DateStruct}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.toStruct());\n     * // expected output: {seconds: 1549622069, nanos: 481145231}\n     */\n    toStruct() {\n        let seconds = this._getSeconds();\n        const nanos = this._getNanos();\n        const sign = Math.sign(seconds);\n        // These objects are essentially a mirror of protobuf timestamps.\n        // `nanos` must always count forward in time, even if the date is <= Unix\n        // epoch. To do this we just need to count backwards 1 second and return the\n        // nanoseconds as is.\n        if (sign === Sign.NEGATIVE && nanos) {\n            seconds -= 1;\n        }\n        return { seconds, nanos };\n    }\n    /**\n     * Returns a tuple representing the specified date according to universal\n     * time.\n     *\n     * @returns {DateTuple}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.toTuple());\n     * // expected output: [1549622069, 481145231]\n     */\n    toTuple() {\n        const { seconds, nanos } = this.toStruct();\n        return [seconds, nanos];\n    }\n    /**\n     * Returns the total number of seconds in the specified date since Unix epoch.\n     * Numbers representing < epoch will be negative.\n     *\n     * @private\n     *\n     * @returns {number}\n     */\n    _getSeconds() {\n        const time = this.getTime();\n        const sign = Math.sign(time);\n        return Math.floor(Math.abs(time) / 1000) * sign;\n    }\n    /**\n     * Returns the sub-second precision of the specified date. This will always be\n     * a positive number.\n     *\n     * @private\n     *\n     * @returns {number}\n     */\n    _getNanos() {\n        const msInNanos = this.getUTCMilliseconds() * 1e6;\n        const microsInNanos = this._micros * 1000;\n        return this._nanos + msInNanos + microsInNanos;\n    }\n    /**\n     * Parses a precise time.\n     *\n     * @static\n     *\n     * @param {string|bigint|DateTuple|DateStruct} time The precise time value.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example <caption>From a RFC 3339 formatted string.</caption>\n     * const time = PreciseDate.parseFull('2019-02-08T10:34:29.481145231Z');\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a nanosecond timestamp string.</caption>\n     * const time = PreciseDate.parseFull('1549622069481145231');\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a BigInt (requires Node >= v10.7)</caption>\n     * const time = PreciseDate.parseFull(1549622069481145231n);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a tuple.</caption>\n     * const time = PreciseDate.parseFull([1549622069, 481145231]);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From an object.</caption>\n     * const struct = {seconds: 1549622069, nanos: 481145231};\n     * const time = PreciseDate.parseFull(struct);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     */\n    static parseFull(time) {\n        const date = new PreciseDate();\n        if (Array.isArray(time)) {\n            const [seconds, nanos] = time;\n            time = { seconds, nanos };\n        }\n        if (isFullTime(time)) {\n            date.setFullTime(time);\n        }\n        else if (isStruct(time)) {\n            const { seconds, nanos } = parseProto(time);\n            date.setTime(seconds * 1000);\n            date.setNanoseconds(nanos);\n        }\n        else if (isFullISOString(time)) {\n            date.setFullTime(parseFullISO(time));\n        }\n        else {\n            date.setTime(new Date(time).getTime());\n        }\n        return date.getFullTimeString();\n    }\n    /**\n     * Accepts the same number parameters as the PreciseDate constructor, but\n     * treats them as UTC. It returns a string that represents the number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @static\n     *\n     * @throws {error} If `BigInt` is unavailable.\n     *\n     * @param {...number} [dateFields] The date fields.\n     * @returns {bigint}\n     *\n     * @example\n     * const time = PreciseDate.fullUTC(2019, 1, 8, 10, 34, 29, 481, 145, 231);\n     * console.log(time); // expected output: 1549622069481145231n\n     */\n    static fullUTC(...args) {\n        if (typeof BigInt !== 'function') {\n            throw new Error(NO_BIG_INT);\n        }\n        return BigInt(PreciseDate.fullUTCString(...args));\n    }\n    /**\n     * Accepts the same number parameters as the PreciseDate constructor, but\n     * treats them as UTC. It returns a string that represents the number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * @static\n     *\n     * @param {...number} [dateFields] The date fields.\n     * @returns {string}\n     *\n     * @example\n     * const time = PreciseDate.fullUTCString(2019, 1, 8, 10, 34, 29, 481, 145,\n     * 231); console.log(time); // expected output: '1549622069481145231'\n     */\n    static fullUTCString(...args) {\n        const milliseconds = Date.UTC(...args.slice(0, 7));\n        const date = new PreciseDate(milliseconds);\n        if (args.length === 9) {\n            date.setNanoseconds(args.pop());\n        }\n        if (args.length === 8) {\n            date.setMicroseconds(args.pop());\n        }\n        return date.getFullTimeString();\n    }\n}\nexports.PreciseDate = PreciseDate;\n/**\n * Parses a RFC 3339 formatted string representation of the date, and returns\n * a string representing the nanoseconds since January 1, 1970, 00:00:00.\n *\n * @private\n *\n * @param {string} time The RFC 3339 formatted string.\n * @returns {string}\n */\nfunction parseFullISO(time) {\n    let digits = '0';\n    time = time.replace(/\\.(\\d+)/, ($0, $1) => {\n        digits = $1;\n        return '.000';\n    });\n    const nanos = Number(padRight(digits, 9));\n    const date = new PreciseDate(time);\n    return date.setNanoseconds(nanos);\n}\n/**\n * Normalizes a {@link google.protobuf.Timestamp} object.\n *\n * @private\n *\n * @param {google.protobuf.Timestamp} timestamp The timestamp object.\n * @returns {DateStruct}\n */\nfunction parseProto({ seconds = 0, nanos = 0 }) {\n    if (typeof seconds.toNumber === 'function') {\n        seconds = seconds.toNumber();\n    }\n    seconds = Number(seconds);\n    nanos = Number(nanos);\n    return { seconds, nanos };\n}\n/**\n * Checks to see if time value is specified in nanoseconds. We assume that all\n * BigInt and string timestamps represent nanoseconds.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isFullTime(time) {\n    return (typeof time === 'bigint' || (typeof time === 'string' && /^\\d+$/.test(time)));\n}\n/**\n * Checks to see if time value is a {@link DateStruct}.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isStruct(time) {\n    return ((typeof time === 'object' &&\n        typeof time.seconds !== 'undefined') ||\n        typeof time.nanos === 'number');\n}\n/**\n * Checks to see if the time value is a RFC 3339 formatted string.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isFullISOString(time) {\n    return typeof time === 'string' && FULL_ISO_REG.test(time);\n}\n/**\n * Pads a number/string with \"0\" to the left.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\nfunction padLeft(n, min) {\n    const padding = getPadding(n, min);\n    return `${padding}${n}`;\n}\n/**\n * Pads a number/string with \"0\" to the right.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\nfunction padRight(n, min) {\n    const padding = getPadding(n, min);\n    return `${n}${padding}`;\n}\n/**\n * Creates padding based on current size and min size needed.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} [min=3] The min size of the padded string.\n * @returns {string}\n */\nfunction getPadding(n, min) {\n    const size = Math.max(min - n.toString().length, 0);\n    return '0'.repeat(size);\n}\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}