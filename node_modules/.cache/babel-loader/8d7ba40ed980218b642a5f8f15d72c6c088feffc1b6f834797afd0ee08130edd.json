{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LeaseManager = void 0;\nconst events_1 = require(\"events\");\nconst default_options_1 = require(\"./default-options\");\n/**\n * @typedef {object} FlowControlOptions\n * @property {boolean} [allowExcessMessages=true] PubSub delivers messages in\n *     batches with no way to configure the batch size. Sometimes this can be\n *     overwhelming if you only want to process a few messages at a time.\n *     Setting this option to false will make the client manage any excess\n *     messages until you're ready for them. This will prevent them from being\n *     redelivered and make the maxMessages option behave more predictably.\n * @property {number} [maxBytes=104857600] The desired amount of memory to\n *     allow message data to consume. (Default: 100MB) It's possible that this\n *     value will be exceeded, since messages are received in batches.\n * @property {number} [maxExtensionMinutes=60] The maximum duration (in minutes)\n *     to extend the message deadline before redelivering.\n * @property {number} [maxMessages=1000] The desired number of messages to allow\n *     in memory before pausing the message stream. Unless allowExcessMessages\n *     is set to false, it is very likely that this value will be exceeded since\n *     any given message batch could contain a greater number of messages than\n *     the desired amount of messages.\n */\n/**\n * Manages a Subscribers inventory while auto-magically extending the message\n * deadlines.\n *\n * @private\n * @class\n *\n * @param {Subscriber} sub The subscriber to manage leases for.\n * @param {FlowControlOptions} options Flow control options.\n */\nclass LeaseManager extends events_1.EventEmitter {\n  constructor(sub, options = {}) {\n    super();\n    this.bytes = 0;\n    this._isLeasing = false;\n    this._messages = new Set();\n    this._pending = [];\n    this._subscriber = sub;\n    this.setOptions(options);\n  }\n  /**\n   * @type {number}\n   * @private\n   */\n  get pending() {\n    return this._pending.length;\n  }\n  /**\n   * @type {number}\n   * @private\n   */\n  get size() {\n    return this._messages.size;\n  }\n  /**\n   * Adds a message to the inventory, kicking off the deadline extender if it\n   * isn't already running.\n   *\n   * @param {Message} message The message.\n   * @private\n   */\n  add(message) {\n    const {\n      allowExcessMessages\n    } = this._options;\n    const wasFull = this.isFull();\n    this._messages.add(message);\n    this.bytes += message.length;\n    if (allowExcessMessages || !wasFull) {\n      this._dispense(message);\n    } else {\n      this._pending.push(message);\n    }\n    if (!this._isLeasing) {\n      this._isLeasing = true;\n      this._scheduleExtension();\n    }\n    if (!wasFull && this.isFull()) {\n      this.emit('full');\n    }\n  }\n  /**\n   * Removes ALL messages from inventory.\n   * @private\n   */\n  clear() {\n    const wasFull = this.isFull();\n    this._pending = [];\n    this._messages.clear();\n    this.bytes = 0;\n    if (wasFull) {\n      process.nextTick(() => this.emit('free'));\n    }\n    this._cancelExtension();\n  }\n  /**\n   * Indicates if we're at or over capacity.\n   *\n   * @returns {boolean}\n   * @private\n   */\n  isFull() {\n    const {\n      maxBytes,\n      maxMessages\n    } = this._options;\n    return this.size >= maxMessages || this.bytes >= maxBytes;\n  }\n  /**\n   * Removes a message from the inventory. Stopping the deadline extender if no\n   * messages are left over.\n   *\n   * @fires LeaseManager#free\n   *\n   * @param {Message} message The message to remove.\n   * @private\n   */\n  remove(message) {\n    if (!this._messages.has(message)) {\n      return;\n    }\n    const wasFull = this.isFull();\n    this._messages.delete(message);\n    this.bytes -= message.length;\n    if (wasFull && !this.isFull()) {\n      process.nextTick(() => this.emit('free'));\n    } else if (this._pending.includes(message)) {\n      const index = this._pending.indexOf(message);\n      this._pending.splice(index, 1);\n    } else if (this.pending > 0) {\n      this._dispense(this._pending.shift());\n    }\n    if (this.size === 0 && this._isLeasing) {\n      this._cancelExtension();\n    }\n  }\n  /**\n   * Sets options for the LeaseManager.\n   *\n   * @param {FlowControlOptions} [options] The options.\n   *\n   * @throws {RangeError} If both maxExtension and maxExtensionMinutes are set.\n   *\n   * @private\n   */\n  setOptions(options) {\n    // Convert the old deprecated maxExtension to avoid breaking clients,\n    // but allow only one.\n    if (options.maxExtension !== undefined && options.maxExtensionMinutes !== undefined) {\n      throw new RangeError('Only one of \"maxExtension\" or \"maxExtensionMinutes\" may be set for subscriber lease management options');\n    }\n    if (options.maxExtension !== undefined && options.maxExtensionMinutes === undefined) {\n      options.maxExtensionMinutes = options.maxExtension / 60;\n      delete options.maxExtension;\n    }\n    const defaults = {\n      allowExcessMessages: true,\n      maxBytes: default_options_1.defaultOptions.subscription.maxOutstandingBytes,\n      maxExtensionMinutes: default_options_1.defaultOptions.subscription.maxExtensionMinutes,\n      maxMessages: default_options_1.defaultOptions.subscription.maxOutstandingMessages\n    };\n    this._options = Object.assign(defaults, options);\n  }\n  /**\n   * Stops extending message deadlines.\n   *\n   * @private\n   */\n  _cancelExtension() {\n    this._isLeasing = false;\n    if (this._timer) {\n      clearTimeout(this._timer);\n      delete this._timer;\n    }\n  }\n  /**\n   * Emits the message. Emitting messages is very slow, so to avoid it acting\n   * as a bottleneck, we're wrapping it in nextTick.\n   *\n   * @private\n   *\n   * @fires Subscriber#message\n   *\n   * @param {Message} message The message to emit.\n   */\n  _dispense(message) {\n    if (this._subscriber.isOpen) {\n      process.nextTick(() => this._subscriber.emit('message', message));\n    }\n  }\n  /**\n   * Loops through inventory and extends the deadlines for any messages that\n   * have not hit the max extension option.\n   *\n   * @private\n   */\n  _extendDeadlines() {\n    const deadline = this._subscriber.ackDeadline;\n    for (const message of this._messages) {\n      // Lifespan here is in minutes.\n      const lifespan = (Date.now() - message.received) / (60 * 1000);\n      if (lifespan < this._options.maxExtensionMinutes) {\n        if (this._subscriber.isExactlyOnceDelivery) {\n          message.modAckWithResponse(deadline).catch(e => {\n            // In the case of a permanent failure (temporary failures are retried),\n            // we need to stop trying to lease-manage the message.\n            message.ackFailed(e);\n            this.remove(message);\n          });\n        } else {\n          message.modAck(deadline);\n        }\n      } else {\n        this.remove(message);\n      }\n    }\n    if (this._isLeasing) {\n      this._scheduleExtension();\n    }\n  }\n  /**\n   * Creates a timeout(ms) that should allow us to extend any message deadlines\n   * before they would be redelivered.\n   *\n   * @private\n   *\n   * @returns {number}\n   */\n  _getNextExtensionTimeoutMs() {\n    const jitter = Math.random();\n    const deadline = this._subscriber.ackDeadline * 1000;\n    const latency = this._subscriber.modAckLatency;\n    return (deadline * 0.9 - latency) * jitter;\n  }\n  /**\n   * Schedules an deadline extension for all messages.\n   *\n   * @private\n   */\n  _scheduleExtension() {\n    const timeout = this._getNextExtensionTimeoutMs();\n    this._timer = setTimeout(() => this._extendDeadlines(), timeout);\n  }\n}\nexports.LeaseManager = LeaseManager;","map":{"version":3,"names":["events_1","require","default_options_1","LeaseManager","EventEmitter","constructor","sub","options","bytes","_isLeasing","_messages","Set","_pending","_subscriber","setOptions","pending","length","size","add","message","allowExcessMessages","_options","wasFull","isFull","_dispense","push","_scheduleExtension","emit","clear","process","nextTick","_cancelExtension","maxBytes","maxMessages","remove","has","delete","includes","index","indexOf","splice","shift","maxExtension","undefined","maxExtensionMinutes","RangeError","defaults","defaultOptions","subscription","maxOutstandingBytes","maxOutstandingMessages","Object","assign","_timer","clearTimeout","isOpen","_extendDeadlines","deadline","ackDeadline","lifespan","Date","now","received","isExactlyOnceDelivery","modAckWithResponse","catch","e","ackFailed","modAck","_getNextExtensionTimeoutMs","jitter","Math","random","latency","modAckLatency","timeout","setTimeout","exports"],"sources":["../../src/lease-manager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}