{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Publisher = exports.flowControlDefaults = exports.BATCH_LIMITS = void 0;\nconst extend = require(\"extend\");\nconst semantic_conventions_1 = require(\"@opentelemetry/semantic-conventions\");\nconst api_1 = require(\"@opentelemetry/api\");\nconst message_queues_1 = require(\"./message-queues\");\nconst default_options_1 = require(\"../default-options\");\nconst opentelemetry_tracing_1 = require(\"../opentelemetry-tracing\");\nconst flow_control_1 = require(\"./flow-control\");\nconst util_1 = require(\"../util\");\n/**\n * @typedef PublishOptions\n * @property {BatchPublishOptions} [batching] The maximum number of bytes to\n *     buffer before sending a payload.\n * @property {FlowControlOptions} [publisherFlowControl] Publisher-side flow\n *     control settings. If this is undefined, Ignore will be the assumed action.\n * @property {object} [gaxOpts] Request configuration options, outlined\n *     {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html|here.}\n * @property {boolean} [messageOrdering] If true, messages published with the\n * same order key in Message will be delivered to the subscribers in the order in which they\n *  are received by the Pub/Sub system. Otherwise, they may be delivered in\n * any order.\n */\nexports.BATCH_LIMITS = {\n  maxBytes: Math.pow(1024, 2) * 9,\n  maxMessages: 1000\n};\nexports.flowControlDefaults = {\n  maxOutstandingBytes: undefined,\n  maxOutstandingMessages: undefined\n};\n/**\n * A Publisher object allows you to publish messages to a specific topic.\n *\n * @private\n * @class\n *\n * @see [Topics: publish API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/publish}\n *\n * @param {Topic} topic The topic associated with this publisher.\n * @param {PublishOptions} [options] Configuration object.\n */\nclass Publisher {\n  constructor(topic, options) {\n    this.flowControl = new flow_control_1.FlowControl((options === null || options === void 0 ? void 0 : options.flowControlOptions) || exports.flowControlDefaults);\n    this.setOptions(options);\n    this.topic = topic;\n    this.queue = new message_queues_1.Queue(this);\n    this.orderedQueues = new Map();\n  }\n  flush(callback) {\n    const definedCallback = callback ? callback : () => {};\n    const toDrain = [this.queue, ...Array.from(this.orderedQueues.values())];\n    const allDrains = Promise.all(toDrain.map(q => new Promise(resolve => {\n      const flushResolver = () => {\n        resolve();\n        // flush() may be called more than once, so remove these\n        // event listeners after we've completed flush().\n        q.removeListener('drain', flushResolver);\n      };\n      q.on('drain', flushResolver);\n    })));\n    const allPublishes = Promise.all(toDrain.map(q => q.publishDrain()));\n    allPublishes.then(() => allDrains).then(() => {\n      definedCallback(null);\n    }).catch(definedCallback);\n  }\n  publish(data, attrsOrCb, callback) {\n    const attributes = typeof attrsOrCb === 'object' ? attrsOrCb : {};\n    callback = typeof attrsOrCb === 'function' ? attrsOrCb : callback;\n    return this.publishMessage({\n      data,\n      attributes\n    }, callback);\n  }\n  publishMessage(message, callback) {\n    const {\n      data,\n      attributes = {}\n    } = message;\n    // We must have at least one of:\n    //   - `data` as a Buffer\n    //   - `attributes` that are not empty\n    if (data && !(data instanceof Buffer)) {\n      throw new TypeError('Data must be in the form of a Buffer.');\n    }\n    const keys = Object.keys(attributes);\n    if (!data && keys.length === 0) {\n      throw new TypeError('If data is undefined, at least one attribute must be present.');\n    }\n    for (const key of keys) {\n      const value = attributes[key];\n      if (typeof value !== 'string') {\n        throw new TypeError(`All attributes must be in the form of a string.\n\\nInvalid value of type \"${typeof value}\" provided for \"${key}\".`);\n      }\n    }\n    const span = this.constructSpan(message);\n    if (!message.orderingKey) {\n      this.queue.add(message, callback);\n      if (span) {\n        span.end();\n      }\n      return;\n    }\n    const key = message.orderingKey;\n    if (!this.orderedQueues.has(key)) {\n      const queue = new message_queues_1.OrderedQueue(this, key);\n      this.orderedQueues.set(key, queue);\n      queue.once('drain', () => this.orderedQueues.delete(key));\n    }\n    const queue = this.orderedQueues.get(key);\n    queue.add(message, callback);\n    if (span) {\n      span.end();\n    }\n  }\n  /**\n   * Indicates to the publisher that it is safe to continue publishing for the\n   * supplied ordering key.\n   *\n   * @private\n   *\n   * @param {string} key The ordering key to continue publishing for.\n   */\n  resumePublishing(key) {\n    const queue = this.orderedQueues.get(key);\n    if (queue) {\n      queue.resumePublishing();\n    }\n  }\n  /**\n   * Returns the set of default options used for {@link Publisher}. The\n   * returned value is a copy, and editing it will have no effect elsehwere.\n   *\n   * This is a non-static method to make it easier to access/stub.\n   *\n   * @private\n   *\n   * @returns {PublishOptions}\n   */\n  getOptionDefaults() {\n    // Return a unique copy to avoid shenanigans.\n    const defaults = {\n      batching: {\n        maxBytes: default_options_1.defaultOptions.publish.maxOutstandingBytes,\n        maxMessages: default_options_1.defaultOptions.publish.maxOutstandingMessages,\n        maxMilliseconds: default_options_1.defaultOptions.publish.maxDelayMillis\n      },\n      messageOrdering: false,\n      gaxOpts: {\n        isBundling: false\n      },\n      enableOpenTelemetryTracing: false,\n      flowControlOptions: Object.assign({}, exports.flowControlDefaults)\n    };\n    return defaults;\n  }\n  /**\n   * Sets the Publisher options.\n   *\n   * @private\n   *\n   * @param {PublishOptions} options The publisher options.\n   */\n  setOptions(options = {}) {\n    const defaults = this.getOptionDefaults();\n    const {\n      batching,\n      gaxOpts,\n      messageOrdering,\n      enableOpenTelemetryTracing,\n      flowControlOptions\n    } = extend(true, defaults, options);\n    this.settings = {\n      batching: {\n        maxBytes: Math.min(batching.maxBytes, exports.BATCH_LIMITS.maxBytes),\n        maxMessages: Math.min(batching.maxMessages, exports.BATCH_LIMITS.maxMessages),\n        maxMilliseconds: batching.maxMilliseconds\n      },\n      gaxOpts,\n      messageOrdering,\n      enableOpenTelemetryTracing,\n      flowControlOptions\n    };\n    // We also need to let all of our queues know that they need to update their options.\n    // Note that these might be undefined, because setOptions() is called in the constructor.\n    if (this.queue) {\n      this.queue.updateOptions();\n    }\n    if (this.orderedQueues) {\n      for (const q of this.orderedQueues.values()) {\n        q.updateOptions();\n      }\n    }\n    // This will always be filled in by our defaults if nothing else.\n    this.flowControl.setOptions(this.settings.flowControlOptions);\n  }\n  /**\n   * Constructs an OpenTelemetry span\n   *\n   * @private\n   *\n   * @param {PubsubMessage} message The message to create a span for\n   */\n  constructSpan(message) {\n    var _a;\n    if (!this.settings.enableOpenTelemetryTracing) {\n      return undefined;\n    }\n    const spanAttributes = {\n      // Add Opentelemetry semantic convention attributes to the span, based on:\n      // https://github.com/open-telemetry/opentelemetry-specification/blob/v1.1.0/specification/trace/semantic_conventions/messaging.md\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_TEMP_DESTINATION]: false,\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_SYSTEM]: 'pubsub',\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_OPERATION]: 'send',\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION]: this.topic.name,\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION_KIND]: 'topic',\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_MESSAGE_ID]: message.messageId,\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_PROTOCOL]: 'pubsub',\n      [semantic_conventions_1.SemanticAttributes.MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES]: (_a = message.data) === null || _a === void 0 ? void 0 : _a.length,\n      'messaging.pubsub.ordering_key': message.orderingKey\n    };\n    const span = (0, opentelemetry_tracing_1.createSpan)(`${this.topic.name} send`, api_1.SpanKind.PRODUCER, spanAttributes);\n    // If the span's context is valid we should pass the span context special attribute\n    if ((0, api_1.isSpanContextValid)(span.spanContext())) {\n      if (message.attributes && message.attributes['googclient_OpenTelemetrySpanContext']) {\n        console.warn('googclient_OpenTelemetrySpanContext key set as message attribute, but will be overridden.');\n      }\n      if (!message.attributes) {\n        message.attributes = {};\n      }\n      message.attributes['googclient_OpenTelemetrySpanContext'] = JSON.stringify(span.spanContext());\n    }\n    return span;\n  }\n}\nexports.Publisher = Publisher;\n(0, util_1.promisifySome)(Publisher, Publisher.prototype, ['flush', 'publishMessage'], {\n  singular: true\n});","map":{"version":3,"names":["extend","require","semantic_conventions_1","api_1","message_queues_1","default_options_1","opentelemetry_tracing_1","flow_control_1","util_1","exports","BATCH_LIMITS","maxBytes","Math","pow","maxMessages","flowControlDefaults","maxOutstandingBytes","undefined","maxOutstandingMessages","Publisher","constructor","topic","options","flowControl","FlowControl","flowControlOptions","setOptions","queue","Queue","orderedQueues","Map","flush","callback","definedCallback","toDrain","Array","from","values","allDrains","Promise","all","map","q","resolve","flushResolver","removeListener","on","allPublishes","publishDrain","then","catch","publish","data","attrsOrCb","attributes","publishMessage","message","Buffer","TypeError","keys","Object","length","key","value","span","constructSpan","orderingKey","add","end","has","OrderedQueue","set","once","delete","get","resumePublishing","getOptionDefaults","defaults","batching","defaultOptions","maxMilliseconds","maxDelayMillis","messageOrdering","gaxOpts","isBundling","enableOpenTelemetryTracing","assign","settings","min","updateOptions","spanAttributes","SemanticAttributes","MESSAGING_TEMP_DESTINATION","MESSAGING_SYSTEM","MESSAGING_OPERATION","MESSAGING_DESTINATION","name","MESSAGING_DESTINATION_KIND","MESSAGING_MESSAGE_ID","messageId","MESSAGING_PROTOCOL","MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES","_a","createSpan","SpanKind","PRODUCER","isSpanContextValid","spanContext","console","warn","JSON","stringify","promisifySome","prototype","singular"],"sources":["../../../src/publisher/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}