{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContextAPI } from '../api/context';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { isSpanContextValid } from './spancontext-utils';\nvar contextApi = ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */function () {\n  function NoopTracer() {}\n  // startSpan starts a noop span.\n  NoopTracer.prototype.startSpan = function (name, options, context) {\n    if (context === void 0) {\n      context = contextApi.active();\n    }\n    var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n    var parentFromContext = context && getSpanContext(context);\n    if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  };\n  NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n    var opts;\n    var ctx;\n    var fn;\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n    var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n    var span = this.startSpan(name, opts, parentContext);\n    var contextWithSpanSet = setSpan(parentContext, span);\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  };\n  return NoopTracer;\n}();\nexport { NoopTracer };\nfunction isSpanContext(spanContext) {\n  return typeof spanContext === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';\n}","map":{"version":3,"names":["ContextAPI","getSpanContext","setSpan","NonRecordingSpan","isSpanContextValid","contextApi","getInstance","NoopTracer","prototype","startSpan","name","options","context","active","root","Boolean","parentFromContext","isSpanContext","startActiveSpan","arg2","arg3","arg4","opts","ctx","fn","arguments","length","parentContext","span","contextWithSpanSet","with","undefined","spanContext"],"sources":["C:\\Users\\Ігор\\clone\\node_modules\\@opentelemetry\\api\\src\\trace\\NoopTracer.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst contextApi = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(\n    name: string,\n    options?: SpanOptions,\n    context = contextApi.active()\n  ): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? contextApi.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,UAAU,QAAQ,gBAAgB;AAE3C,SAASC,cAAc,EAAEC,OAAO,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,kBAAkB,QAAQ,qBAAqB;AAKxD,IAAMC,UAAU,GAAGL,UAAU,CAACM,WAAW,EAAE;AAE3C;;;AAGA,IAAAC,UAAA;EAAA,SAAAA,WAAA,GAoEA;EAnEE;EACAA,UAAA,CAAAC,SAAA,CAAAC,SAAS,GAAT,UACEC,IAAY,EACZC,OAAqB,EACrBC,OAA6B;IAA7B,IAAAA,OAAA;MAAAA,OAAA,GAAUP,UAAU,CAACQ,MAAM,EAAE;IAAA;IAE7B,IAAMC,IAAI,GAAGC,OAAO,CAACJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,IAAI,CAAC;IACnC,IAAIA,IAAI,EAAE;MACR,OAAO,IAAIX,gBAAgB,EAAE;;IAG/B,IAAMa,iBAAiB,GAAGJ,OAAO,IAAIX,cAAc,CAACW,OAAO,CAAC;IAE5D,IACEK,aAAa,CAACD,iBAAiB,CAAC,IAChCZ,kBAAkB,CAACY,iBAAiB,CAAC,EACrC;MACA,OAAO,IAAIb,gBAAgB,CAACa,iBAAiB,CAAC;KAC/C,MAAM;MACL,OAAO,IAAIb,gBAAgB,EAAE;;EAEjC,CAAC;EAiBDI,UAAA,CAAAC,SAAA,CAAAU,eAAe,GAAf,UACER,IAAY,EACZS,IAAsB,EACtBC,IAAkB,EAClBC,IAAQ;IAER,IAAIC,IAA6B;IACjC,IAAIC,GAAwB;IAC5B,IAAIC,EAAK;IAET,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACxB;KACD,MAAM,IAAID,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MACjCF,EAAE,GAAGL,IAAS;KACf,MAAM,IAAIM,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MACjCJ,IAAI,GAAGH,IAA+B;MACtCK,EAAE,GAAGJ,IAAS;KACf,MAAM;MACLE,IAAI,GAAGH,IAA+B;MACtCI,GAAG,GAAGH,IAA2B;MACjCI,EAAE,GAAGH,IAAS;;IAGhB,IAAMM,aAAa,GAAGJ,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAIlB,UAAU,CAACQ,MAAM,EAAE;IAChD,IAAMe,IAAI,GAAG,IAAI,CAACnB,SAAS,CAACC,IAAI,EAAEY,IAAI,EAAEK,aAAa,CAAC;IACtD,IAAME,kBAAkB,GAAG3B,OAAO,CAACyB,aAAa,EAAEC,IAAI,CAAC;IAEvD,OAAOvB,UAAU,CAACyB,IAAI,CAACD,kBAAkB,EAAEL,EAAE,EAAEO,SAAS,EAAEH,IAAI,CAAC;EACjE,CAAC;EACH,OAAArB,UAAC;AAAD,CAAC,CApED;;AAsEA,SAASU,aAAaA,CAACe,WAAgB;EACrC,OACE,OAAOA,WAAW,KAAK,QAAQ,IAC/B,OAAOA,WAAW,CAAC,QAAQ,CAAC,KAAK,QAAQ,IACzC,OAAOA,WAAW,CAAC,SAAS,CAAC,KAAK,QAAQ,IAC1C,OAAOA,WAAW,CAAC,YAAY,CAAC,KAAK,QAAQ;AAEjD"},"metadata":{},"sourceType":"module","externalDependencies":[]}