{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */function () {\n  function ProxyTracerProvider() {}\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n    var _a;\n    return (_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version, options);\n  };\n  ProxyTracerProvider.prototype.getDelegate = function () {\n    var _a;\n    return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n  };\n  /**\n   * Set the delegate tracer provider\n   */\n  ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n    this._delegate = delegate;\n  };\n  ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n    var _a;\n    return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n  };\n  return ProxyTracerProvider;\n}();\nexport { ProxyTracerProvider };","map":{"version":3,"names":["ProxyTracer","NoopTracerProvider","NOOP_TRACER_PROVIDER","ProxyTracerProvider","prototype","getTracer","name","version","options","_a","getDelegateTracer","getDelegate","_delegate","setDelegate","delegate"],"sources":["C:\\Users\\Ігор\\clone\\node_modules\\@opentelemetry\\api\\src\\trace\\ProxyTracerProvider.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,kBAAkB,QAAQ,sBAAsB;AAGzD,IAAMC,oBAAoB,GAAG,IAAID,kBAAkB,EAAE;AAErD;;;;;;;;AAQA,IAAAE,mBAAA;EAAA,SAAAA,oBAAA,GA+BA;EA5BE;;;EAGAA,mBAAA,CAAAC,SAAA,CAAAC,SAAS,GAAT,UAAUC,IAAY,EAAEC,OAAgB,EAAEC,OAAuB;;IAC/D,OACE,CAAAC,EAAA,OAAI,CAACC,iBAAiB,CAACJ,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC,cAAAC,EAAA,cAAAA,EAAA,GAC9C,IAAIT,WAAW,CAAC,IAAI,EAAEM,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAEjD,CAAC;EAEDL,mBAAA,CAAAC,SAAA,CAAAO,WAAW,GAAX;;IACE,OAAO,CAAAF,EAAA,OAAI,CAACG,SAAS,cAAAH,EAAA,cAAAA,EAAA,GAAIP,oBAAoB;EAC/C,CAAC;EAED;;;EAGAC,mBAAA,CAAAC,SAAA,CAAAS,WAAW,GAAX,UAAYC,QAAwB;IAClC,IAAI,CAACF,SAAS,GAAGE,QAAQ;EAC3B,CAAC;EAEDX,mBAAA,CAAAC,SAAA,CAAAM,iBAAiB,GAAjB,UACEJ,IAAY,EACZC,OAAgB,EAChBC,OAAuB;;IAEvB,OAAO,CAAAC,EAAA,OAAI,CAACG,SAAS,cAAAH,EAAA,uBAAAA,EAAA,CAAEJ,SAAS,CAACC,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAC1D,CAAC;EACH,OAAAL,mBAAC;AAAD,CAAC,CA/BD"},"metadata":{},"sourceType":"module","externalDependencies":[]}