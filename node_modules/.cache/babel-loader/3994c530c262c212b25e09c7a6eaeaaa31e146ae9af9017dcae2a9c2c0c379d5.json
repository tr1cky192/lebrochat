{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Subscription = exports.AckResponses = exports.AckError = void 0;\nconst events_1 = require(\"events\");\nconst extend = require(\"extend\");\nconst snakeCase = require(\"lodash.snakecase\");\nconst iam_1 = require(\"./iam\");\nconst snapshot_1 = require(\"./snapshot\");\nconst subscriber_1 = require(\"./subscriber\");\nconst util_1 = require(\"./util\");\nvar subscriber_2 = require(\"./subscriber\");\nObject.defineProperty(exports, \"AckError\", {\n  enumerable: true,\n  get: function () {\n    return subscriber_2.AckError;\n  }\n});\nObject.defineProperty(exports, \"AckResponses\", {\n  enumerable: true,\n  get: function () {\n    return subscriber_2.AckResponses;\n  }\n});\n// JSDoc won't see these, so this is just to let you get typings\n// in your editor of choice.\n//\n// NOTE: These are commented out for now because we don't want to\n// break any existing clients that rely on not-entirely-correct\n// typings. We'll re-enable on the next major.\n/* export declare interface Subscription {\n  on(\n    event: 'message',\n    listener: (message: Message) => void\n  ): this;\n  on(\n    event: 'error',\n    listener: (error: StatusError) => void\n  ): this;\n  on(event: 'close', listener: () => void): this;\n  on(event: 'debug', listener: (msg: DebugMessage) => void); this;\n\n  // Only used internally.\n  on(event: 'newListener', listener: Function): this;\n  on(event: 'removeListener', listener: Function): this;\n\n  // Catch-all. If you get an error about this line, it means you're\n  // using an unsupported event type or listener type.\n  on(event: string, listener: void): this;\n} */\n/**\n * @typedef {object} ExpirationPolicy\n * A policy that specifies the conditions for this subscription's expiration. A\n * subscription is considered active as long as any connected subscriber is\n * successfully consuming messages from the subscription or is issuing\n * operations on the subscription. If expirationPolicy is not set, a default\n * policy with ttl of 31 days will be used. The minimum allowed value for\n * expirationPolicy.ttl is 1 day.\n * @property {google.protobuf.Duration} ttl Specifies the \"time-to-live\"\n *     duration for an associated resource. The resource expires if it is not\n *     active for a period of `ttl`. The definition of \"activity\" depends on the\n *     type of the associated resource. The minimum and maximum allowed values\n *     for `ttl` depend on the type of the associated resource, as well. If\n *     `ttl` is not set, the associated resource never expires.\n */\n/**\n * A Subscription object will give you access to your Cloud Pub/Sub\n * subscription.\n *\n * Subscriptions are sometimes retrieved when using various methods:\n *\n * - {@link PubSub#getSubscriptions}\n * - {@link Topic#getSubscriptions}\n *\n * Subscription objects may be created directly with:\n *\n * - {@link PubSub#createSubscription}\n * - {@link Topic#createSubscription}\n *\n * All Subscription objects are instances of an\n * [EventEmitter](http://nodejs.org/api/events.html). The subscription will pull\n * for messages automatically as long as there is at least one listener assigned\n * for the `message` event. Available events:\n *\n * Upon receipt of a message:\n * on(event: 'message', listener: (message: {@link Message}) => void): this;\n *\n * Upon receipt of an error:\n * on(event: 'error', listener: (error: Error) => void): this;\n *\n * Upon receipt of a (non-fatal) debug warning:\n * on(event: 'debug', listener: (msg: DebugMessage) => void): this;\n *\n * Upon the closing of the subscriber:\n * on(event: 'close', listener: Function): this;\n *\n * By default Subscription objects allow you to process 100 messages at the same\n * time. You can fine tune this value by adjusting the\n * `options.flowControl.maxMessages` option.\n *\n * If your subscription is seeing more re-deliveries than preferable, you might\n * try increasing your `options.ackDeadline` value or decreasing the\n * `options.streamingOptions.maxStreams` value.\n *\n * Subscription objects handle ack management, by automatically extending the\n * ack deadline while the message is being processed, to then issue the ack or\n * nack of such message when the processing is done. **Note:** message\n * redelivery is still possible.\n *\n * By default each {@link PubSub} instance can handle 100 open streams, with\n * default options this translates to less than 20 Subscriptions per PubSub\n * instance. If you wish to create more Subscriptions than that, you can either\n * create multiple PubSub instances or lower the\n * `options.streamingOptions.maxStreams` value on each Subscription object.\n *\n * @class\n *\n * @param {PubSub} pubsub PubSub object.\n * @param {string} name The name of the subscription.\n * @param {SubscriberOptions} [options] Options for handling messages.\n *\n * @example From {@link PubSub#getSubscriptions}\n * ```\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSubscriptions((err, subscriptions) => {\n *   // `subscriptions` is an array of Subscription objects.\n * });\n *\n * ```\n * @example From {@link Topic#getSubscriptions}\n * ```\n * const topic = pubsub.topic('my-topic');\n * topic.getSubscriptions((err, subscriptions) => {\n *   // `subscriptions` is an array of Subscription objects.\n * });\n *\n * ```\n * @example {@link Topic#createSubscription}\n * ```\n * const topic = pubsub.topic('my-topic');\n * topic.createSubscription('new-subscription', (err, subscription) => {\n *   // `subscription` is a Subscription object.\n * });\n *\n * ```\n * @example {@link Topic#subscription}\n * ```\n * const topic = pubsub.topic('my-topic');\n * const subscription = topic.subscription('my-subscription');\n * // `subscription` is a Subscription object.\n *\n * ```\n * @example Once you have obtained a subscription object, you may begin to register listeners. This will automatically trigger pulling for messages.\n * ```\n * // Register an error handler.\n * subscription.on('error', (err) => {});\n *\n * // Register a debug handler, to catch non-fatal errors and other messages.\n * subscription.on('debug', msg => { console.log(msg.message); });\n *\n * // Register a close handler in case the subscriber closes unexpectedly\n * subscription.on('close', () => {});\n *\n * // Register a listener for `message` events.\n * function onMessage(message) {\n *   // Called every time a message is received.\n *\n *   // message.id = ID of the message.\n *   // message.ackId = ID used to acknowledge the message receival.\n *   // message.data = Contents of the message.\n *   // message.attributes = Attributes of the message.\n *   // message.publishTime = Date when Pub/Sub received the message.\n *\n *   // Ack the message:\n *   // message.ack();\n *\n *   // This doesn't ack the message, but allows more messages to be retrieved\n *   // if your limit was hit or if you don't want to ack the message.\n *   // message.nack();\n * }\n * subscription.on('message', onMessage);\n *\n * // Remove the listener from receiving `message` events.\n * subscription.removeListener('message', onMessage);\n *\n * ```\n * @example To apply a fine level of flow control, consider the following configuration\n * ```\n * const subscription = topic.subscription('my-sub', {\n *   flowControl: {\n *     maxMessages: 1,\n *     // this tells the client to manage and lock any excess messages\n *     allowExcessMessages: false\n *   }\n * });\n * ```\n */\nclass Subscription extends events_1.EventEmitter {\n  constructor(pubsub, name, options) {\n    super();\n    options = options || {};\n    this.pubsub = pubsub;\n    this.request = pubsub.request.bind(pubsub);\n    this.name = Subscription.formatName_(this.projectId, name);\n    this.topic = options.topic;\n    /**\n     * [IAM (Identity and Access\n     * Management)](https://cloud.google.com/pubsub/access_control) allows you\n     * to set permissions on individual resources and offers a wider range of\n     * roles: editor, owner, publisher, subscriber, and viewer. This gives you\n     * greater flexibility and allows you to set more fine-grained access\n     * control.\n     *\n     * *The IAM access control features described in this document are Beta,\n     * including the API methods to get and set IAM policies, and to test IAM\n     * permissions. Cloud Pub/Sub's use of IAM features is not covered by\n     * any SLA or deprecation policy, and may be subject to\n     * backward-incompatible changes.*\n     *\n     * @name Subscription#iam\n     * @mixes IAM\n     *\n     * @see [Access Control Overview]{@link https://cloud.google.com/pubsub/access_control}\n     * @see [What is Cloud IAM?]{@link https://cloud.google.com/iam/}\n     *\n     * @example\n     * ```\n     * //-\n     * // Get the IAM policy for your subscription.\n     * //-\n     * subscription.iam.getPolicy((err, policy) => {\n     *   console.log(policy);\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * subscription.iam.getPolicy().then((data) => {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    this.iam = new iam_1.IAM(pubsub, this.name);\n    this._subscriber = new subscriber_1.Subscriber(this, options);\n    this._subscriber.on('error', err => this.emit('error', err)).on('debug', msg => this.emit('debug', msg)).on('message', message => this.emit('message', message)).on('close', () => this.emit('close'));\n    this._listen();\n  }\n  /**\n   * Indicates if the Subscription is open and receiving messages.\n   *\n   * @type {boolean}\n   */\n  get isOpen() {\n    return !!(this._subscriber && this._subscriber.isOpen);\n  }\n  /**\n   * @type {string}\n   */\n  get projectId() {\n    return this.pubsub && this.pubsub.projectId || '{{projectId}}';\n  }\n  close(callback) {\n    this._subscriber.close().then(() => callback(), callback);\n  }\n  create(optsOrCallback, callback) {\n    if (!this.topic) {\n      throw new Error('Subscriptions can only be created when accessed through Topics');\n    }\n    const name = this.name.split('/').pop();\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    this.pubsub.createSubscription(this.topic, name, options, (err, sub, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      Object.assign(this, sub);\n      callback(null, this, resp);\n    });\n  }\n  createSnapshot(name, optsOrCallback, callback) {\n    if (typeof name !== 'string') {\n      throw new Error('A name is required to create a snapshot.');\n    }\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const snapshot = this.snapshot(name);\n    const reqOpts = {\n      name: snapshot.name,\n      subscription: this.name\n    };\n    this.request({\n      client: 'SubscriberClient',\n      method: 'createSnapshot',\n      reqOpts,\n      gaxOpts\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      snapshot.metadata = resp;\n      callback(null, snapshot, resp);\n    });\n  }\n  delete(optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      subscription: this.name\n    };\n    if (this.isOpen) {\n      this._subscriber.close();\n    }\n    this.request({\n      client: 'SubscriberClient',\n      method: 'deleteSubscription',\n      reqOpts,\n      gaxOpts\n    }, callback);\n  }\n  detached(callback) {\n    this.getMetadata((err, metadata) => {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, metadata.detached);\n      }\n    });\n  }\n  exists(callback) {\n    this.getMetadata(err => {\n      if (!err) {\n        callback(null, true);\n        return;\n      }\n      if (err.code === 5) {\n        callback(null, false);\n        return;\n      }\n      callback(err);\n    });\n  }\n  get(optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const autoCreate = !!gaxOpts.autoCreate && this.topic;\n    delete gaxOpts.autoCreate;\n    this.getMetadata(gaxOpts, (err, apiResponse) => {\n      if (!err) {\n        callback(null, this, apiResponse);\n        return;\n      }\n      if (err.code !== 5 || !autoCreate) {\n        callback(err, null, apiResponse);\n        return;\n      }\n      this.create({\n        gaxOpts\n      }, callback);\n    });\n  }\n  getMetadata(optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      subscription: this.name\n    };\n    this.request({\n      client: 'SubscriberClient',\n      method: 'getSubscription',\n      reqOpts,\n      gaxOpts\n    }, (err, apiResponse) => {\n      if (!err) {\n        this.metadata = apiResponse;\n      }\n      callback(err, apiResponse);\n    });\n  }\n  modifyPushConfig(config, optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      subscription: this.name,\n      pushConfig: config\n    };\n    this.request({\n      client: 'SubscriberClient',\n      method: 'modifyPushConfig',\n      reqOpts,\n      gaxOpts\n    }, callback);\n  }\n  /**\n   * Opens the Subscription to receive messages. In general this method\n   * shouldn't need to be called, unless you wish to receive messages after\n   * calling {@link Subscription#close}. Alternatively one could just assign a\n   * new `message` event listener which will also re-open the Subscription.\n   *\n   * @example\n   * ```\n   * subscription.on('message', message => message.ack());\n   *\n   * // Close the subscription.\n   * subscription.close(err => {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   The subscription has been closed and messages will no longer be received.\n   * });\n   *\n   * // Resume receiving messages.\n   * subscription.open();\n   * ```\n   */\n  open() {\n    if (!this._subscriber.isOpen) {\n      this._subscriber.open();\n    }\n  }\n  seek(snapshot, optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = {\n      subscription: this.name\n    };\n    if (typeof snapshot === 'string') {\n      reqOpts.snapshot = snapshot_1.Snapshot.formatName_(this.pubsub.projectId, snapshot);\n    } else if (Object.prototype.toString.call(snapshot) === '[object Date]') {\n      const dateMillis = snapshot.getTime();\n      reqOpts.time = {\n        seconds: Math.floor(dateMillis / 1000),\n        nanos: Math.floor(dateMillis % 1000) * 1000\n      };\n    } else {\n      throw new Error('Either a snapshot name or Date is needed to seek to.');\n    }\n    this.request({\n      client: 'SubscriberClient',\n      method: 'seek',\n      reqOpts,\n      gaxOpts\n    }, callback);\n  }\n  setMetadata(metadata, optsOrCallback, callback) {\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const subscription = Subscription.formatMetadata_(metadata);\n    const fields = Object.keys(subscription).map(snakeCase);\n    subscription.name = this.name;\n    const reqOpts = {\n      subscription,\n      updateMask: {\n        paths: fields\n      }\n    };\n    this.request({\n      client: 'SubscriberClient',\n      method: 'updateSubscription',\n      reqOpts,\n      gaxOpts\n    }, callback);\n  }\n  /**\n   * Sets the Subscription options.\n   *\n   * @param {SubscriberOptions} options The options.\n   */\n  setOptions(options) {\n    this._subscriber.setOptions(options);\n  }\n  /**\n   * Create a Snapshot object. See {@link Subscription#createSnapshot} to\n   * create a snapshot.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The name of the snapshot.\n   * @returns {Snapshot}\n   *\n   * @example\n   * ```\n   * const snapshot = subscription.snapshot('my-snapshot');\n   * ```\n   */\n  snapshot(name) {\n    return this.pubsub.snapshot.call(this, name);\n  }\n  /**\n   * Watches for incoming message event handlers and open/closes the\n   * subscriber as needed.\n   *\n   * @private\n   */\n  _listen() {\n    this.on('newListener', event => {\n      if (!this.isOpen && event === 'message') {\n        this._subscriber.open();\n      }\n    });\n    this.on('removeListener', () => {\n      if (this.isOpen && this.listenerCount('message') === 0) {\n        this._subscriber.close();\n      }\n    });\n  }\n  /*!\n   * Formats Subscription metadata.\n   *\n   * @private\n   */\n  static formatMetadata_(metadata) {\n    const formatted = extend(true, {}, metadata);\n    if (typeof metadata.messageRetentionDuration === 'number') {\n      formatted.messageRetentionDuration = {\n        seconds: metadata.messageRetentionDuration,\n        nanos: 0\n      };\n    }\n    if (metadata.pushEndpoint) {\n      formatted.pushConfig = {\n        pushEndpoint: metadata.pushEndpoint\n      };\n      delete formatted.pushEndpoint;\n    }\n    if (metadata.oidcToken) {\n      formatted.pushConfig = {\n        ...formatted.pushConfig,\n        oidcToken: metadata.oidcToken\n      };\n      delete formatted.oidcToken;\n    }\n    return formatted;\n  }\n  /*!\n   * Format the name of a subscription. A subscription's full name is in the\n   * format of projects/{projectId}/subscriptions/{subName}.\n   *\n   * @private\n   */\n  static formatName_(projectId, name) {\n    // Simple check if the name is already formatted.\n    if (name.indexOf('/') > -1) {\n      return name;\n    }\n    return 'projects/' + projectId + '/subscriptions/' + name;\n  }\n}\nexports.Subscription = Subscription;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, util_1.promisifySome)(Subscription, Subscription.prototype, ['close', 'create', 'createSnapshot', 'delete', 'detached', 'exists', 'get', 'getMetadata', 'modifyPushConfig', 'seek', 'setMetadata']);","map":{"version":3,"names":["events_1","require","extend","snakeCase","iam_1","snapshot_1","subscriber_1","util_1","subscriber_2","Object","defineProperty","exports","enumerable","get","AckError","AckResponses","Subscription","EventEmitter","constructor","pubsub","name","options","request","bind","formatName_","projectId","topic","iam","IAM","_subscriber","Subscriber","on","err","emit","msg","message","_listen","isOpen","close","callback","then","create","optsOrCallback","Error","split","pop","createSubscription","sub","resp","assign","createSnapshot","gaxOpts","snapshot","reqOpts","subscription","client","method","metadata","delete","detached","getMetadata","exists","code","autoCreate","apiResponse","modifyPushConfig","config","pushConfig","open","seek","Snapshot","prototype","toString","call","dateMillis","getTime","time","seconds","Math","floor","nanos","setMetadata","formatMetadata_","fields","keys","map","updateMask","paths","setOptions","event","listenerCount","formatted","messageRetentionDuration","pushEndpoint","oidcToken","indexOf","promisifySome"],"sources":["../../src/subscription.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}