{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encodings = exports.SchemaViews = exports.SchemaTypes = exports.Schema = void 0;\n// Unlike the earlier classes, this one does not do its own gax access.\n// Rather, it calls back through the schemaClient instance PubSub holds.\n// This class is a very lightweight syntactic wrapper around the GAPIC client.\n/**\n * A Schema object allows you to interact with a Cloud Pub/Sub schema.\n *\n * This should only be instantiated by the PubSub class. To obtain an\n * instance for end user usage, call pubsub.schema().\n *\n * @class\n * @param {PubSub} pubsub The PubSub object creating this object.\n * @param {id} id name or ID of the schema.\n *\n * @example Creating an instance of this class.\n * ```\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const schema = pubsub.schema('my-schema');\n *\n * ```\n * @example Getting the details of a schema. Note that Schema methods do not provide a callback interface. Use .then() or await.\n * ```\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * const schema = pubsub.schema('my-schema');\n * schema.get(SchemaViews.Basic).then(console.log);\n * ```\n */\nclass Schema {\n  constructor(pubsub, idOrName) {\n    /**\n     * The parent {@link PubSub} instance of this topic instance.\n     * @name Schema#pubsub\n     * @type {PubSub}\n     */\n    this.pubsub = pubsub;\n    /**\n     * The fully qualified name of this schema. We will qualify this if\n     * it's only an ID passed (assuming the parent project). Unfortunately,\n     * we might not be able to do that if our pubsub's client hasn't been\n     * initialized. In that case, we just set the id and get the name later.\n     * @name Schema#id\n     * @type {string}\n     */\n    this.id = idOrName.indexOf('/') >= 0 ? idOrName.substr(idOrName.lastIndexOf('/') + 1) : idOrName;\n  }\n  /**\n   * Return the fully qualified name of this schema.\n   *\n   * Note that we have to verify that we have a projectId before returning this,\n   * so we have to check that first.\n   *\n   * @return {Promise<string>} a Promise that resolves to the full schema name\n   */\n  async getName() {\n    if (!this.name_) {\n      if (!this.pubsub.isIdResolved) {\n        await this.pubsub.getClientConfig();\n      }\n      this.name_ = Schema.formatName_(this.pubsub.projectId, this.id);\n    }\n    return this.name_;\n  }\n  /**\n   * Create a schema.\n   *\n   * @see [Schemas: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/create}\n   *\n   * @throws {Error} if the schema type is incorrect.\n   * @throws {Error} if the definition is invalid.\n   *\n   * @param {SchemaType} type The type of the schema (Protobuf, Avro, etc).\n   * @param {string} definition The text describing the schema in terms of the type.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<void>}\n   *\n   * @example Create a schema.\n   * ```\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const schema = pubsub.schema('messageType');\n   * await schema.create(\n   *   SchemaTypes.Avro,\n   *   '{...avro definition...}'\n   * );\n   * ```\n   */\n  async create(type, definition, gaxOpts) {\n    const name = await this.getName();\n    await this.pubsub.createSchema(name, type, definition, gaxOpts);\n  }\n  /**\n   * Get full information about the schema from the service.\n   *\n   * @see [Schemas: getSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/get}\n   *\n   * @param {google.pubsub.v1.SchemaView} [view] The type of schema object\n   *   requested, which should be an enum value from {@link SchemaViews}. Defaults\n   *   to Full.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<ISchema>}\n   */\n  async get(view = exports.SchemaViews.Full, gaxOpts) {\n    const client = await this.pubsub.getSchemaClient_();\n    const name = await this.getName();\n    const [schema] = await client.getSchema({\n      name,\n      view\n    }, gaxOpts);\n    return schema;\n  }\n  /**\n   * Delete the schema from the project.\n   *\n   * @see [Schemas: deleteSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/delete}\n   *\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<void>}\n   */\n  async delete(gaxOpts) {\n    const client = await this.pubsub.getSchemaClient_();\n    const name = await this.getName();\n    await client.deleteSchema({\n      name\n    }, gaxOpts);\n  }\n  /**\n   * Validate a message against this schema's definition.\n   *\n   * If you would like to validate a message against an arbitrary schema, please\n   * use the {@link SchemaServiceClient} GAPIC class directly, using your\n   * {@link PubSub} instance's configuration, via {@link PubSub#getClientConfig}.\n   *\n   * @see [Schemas: validateMessage API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/validateMessage}\n   *\n   * @throws {Error} if the validation fails.\n   * @throws {Error} if other parameters are invalid.\n   *\n   * @param {string} message The message to validate.\n   * @param {Encoding | \"JSON\" | \"BINARY\"} encoding The encoding of the message to validate.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<void>}\n   */\n  async validateMessage(message, encoding, gaxOpts) {\n    const client = await this.pubsub.getSchemaClient_();\n    const name = await this.getName();\n    await client.validateMessage({\n      parent: this.pubsub.name,\n      name,\n      message,\n      encoding\n    }, gaxOpts);\n  }\n  /*!\n   * Format the name of a schema. A schema's full name is in the\n   * format of projects/{projectId}/schemas/{schemaName}.\n   *\n   * The GAPIC client should do this for us, but since we maintain\n   * names rather than IDs, this is simpler.\n   *\n   * @private\n   */\n  static formatName_(projectId, nameOrId) {\n    if (typeof nameOrId !== 'string') {\n      throw new Error('A name is required to identify a schema.');\n    }\n    // Simple check if the name is already formatted.\n    if (nameOrId.indexOf('/') > -1) {\n      return nameOrId;\n    }\n    return `projects/${projectId}/schemas/${nameOrId}`;\n  }\n  /**\n   * Translates the schema attributes in messages delivered from Pub/Sub.\n   * All resulting fields may end up being blank.\n   */\n  static metadataFromMessage(attributes) {\n    return {\n      name: attributes['googclient_schemaname'],\n      encoding: attributes['googclient_schemaencoding']\n    };\n  }\n}\nexports.Schema = Schema;\n// Also export these for JavaScript compatible usage.\nexports.SchemaTypes = {\n  ProtocolBuffer: 'PROTOCOL_BUFFER',\n  Avro: 'AVRO'\n};\nexports.SchemaViews = {\n  Basic: 'BASIC',\n  Full: 'FULL'\n};\n// These are not schema-specific, but this seems to be the\n// only place that exports methods that need them.\nexports.Encodings = {\n  Json: 'JSON',\n  Binary: 'BINARY'\n};","map":{"version":3,"names":["Schema","constructor","pubsub","idOrName","id","indexOf","substr","lastIndexOf","getName","name_","isIdResolved","getClientConfig","formatName_","projectId","create","type","definition","gaxOpts","name","createSchema","get","view","exports","SchemaViews","Full","client","getSchemaClient_","schema","getSchema","delete","deleteSchema","validateMessage","message","encoding","parent","nameOrId","Error","metadataFromMessage","attributes","SchemaTypes","ProtocolBuffer","Avro","Basic","Encodings","Json","Binary"],"sources":["../../src/schema.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}