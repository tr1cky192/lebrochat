{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function ContextAPI() {}\n  /** Get the singleton instance of the Context API */\n  ContextAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  };\n  /**\n   * Get the currently active context\n   */\n  ContextAPI.prototype.active = function () {\n    return this._getContextManager().active();\n  };\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  ContextAPI.prototype.with = function (context, fn, thisArg) {\n    var _a;\n    var args = [];\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n    return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));\n  };\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  ContextAPI.prototype.bind = function (context, target) {\n    return this._getContextManager().bind(context, target);\n  };\n  ContextAPI.prototype._getContextManager = function () {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  };\n  /** Disable and remove the global context manager */\n  ContextAPI.prototype.disable = function () {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  };\n  return ContextAPI;\n}();\nexport { ContextAPI };","map":{"version":3,"names":["NoopContextManager","getGlobal","registerGlobal","unregisterGlobal","DiagAPI","API_NAME","NOOP_CONTEXT_MANAGER","ContextAPI","getInstance","_instance","prototype","setGlobalContextManager","contextManager","instance","active","_getContextManager","with","context","fn","thisArg","args","_i","arguments","length","_a","apply","__spreadArray","__read","bind","target","disable"],"sources":["C:\\Users\\Ігор\\clone\\node_modules\\@opentelemetry\\api\\src\\api\\context.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAASA,kBAAkB,QAAQ,+BAA+B;AAElE,SACEC,SAAS,EACTC,cAAc,EACdC,gBAAgB,QACX,0BAA0B;AACjC,SAASC,OAAO,QAAQ,QAAQ;AAEhC,IAAMC,QAAQ,GAAG,SAAS;AAC1B,IAAMC,oBAAoB,GAAG,IAAIN,kBAAkB,EAAE;AAErD;;;AAGA,IAAAO,UAAA;EAGE;EACA,SAAAA,WAAA,GAAuB;EAEvB;EACcA,UAAA,CAAAC,WAAW,GAAzB;IACE,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAIF,UAAU,EAAE;;IAGnC,OAAO,IAAI,CAACE,SAAS;EACvB,CAAC;EAED;;;;;EAKOF,UAAA,CAAAG,SAAA,CAAAC,uBAAuB,GAA9B,UAA+BC,cAA8B;IAC3D,OAAOV,cAAc,CAACG,QAAQ,EAAEO,cAAc,EAAER,OAAO,CAACS,QAAQ,EAAE,CAAC;EACrE,CAAC;EAED;;;EAGON,UAAA,CAAAG,SAAA,CAAAI,MAAM,GAAb;IACE,OAAO,IAAI,CAACC,kBAAkB,EAAE,CAACD,MAAM,EAAE;EAC3C,CAAC;EAED;;;;;;;;EAQOP,UAAA,CAAAG,SAAA,CAAAM,IAAI,GAAX,UACEC,OAAgB,EAChBC,EAAK,EACLC,OAA8B;;IAC9B,IAAAC,IAAA;SAAA,IAAAC,EAAA,IAAU,EAAVA,EAAA,GAAAC,SAAA,CAAAC,MAAU,EAAVF,EAAA,EAAU;MAAVD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;IAEA,OAAO,CAAAG,EAAA,OAAI,CAACT,kBAAkB,EAAE,EAACC,IAAI,CAAAS,KAAA,CAAAD,EAAA,EAAAE,aAAA,EAACT,OAAO,EAAEC,EAAE,EAAEC,OAAO,GAAAQ,MAAA,CAAKP,IAAI;EACrE,CAAC;EAED;;;;;;EAMOb,UAAA,CAAAG,SAAA,CAAAkB,IAAI,GAAX,UAAeX,OAAgB,EAAEY,MAAS;IACxC,OAAO,IAAI,CAACd,kBAAkB,EAAE,CAACa,IAAI,CAACX,OAAO,EAAEY,MAAM,CAAC;EACxD,CAAC;EAEOtB,UAAA,CAAAG,SAAA,CAAAK,kBAAkB,GAA1B;IACE,OAAOd,SAAS,CAACI,QAAQ,CAAC,IAAIC,oBAAoB;EACpD,CAAC;EAED;EACOC,UAAA,CAAAG,SAAA,CAAAoB,OAAO,GAAd;IACE,IAAI,CAACf,kBAAkB,EAAE,CAACe,OAAO,EAAE;IACnC3B,gBAAgB,CAACE,QAAQ,EAAED,OAAO,CAACS,QAAQ,EAAE,CAAC;EAChD,CAAC;EACH,OAAAN,UAAC;AAAD,CAAC,CAnED"},"metadata":{},"sourceType":"module","externalDependencies":[]}