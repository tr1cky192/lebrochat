{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */function () {\n  function NoopMeter() {}\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  NoopMeter.prototype.createHistogram = function (_name, _options) {\n    return NOOP_HISTOGRAM_METRIC;\n  };\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  NoopMeter.prototype.createCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) {};\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  NoopMeter.prototype.removeBatchObservableCallback = function (_callback) {};\n  return NoopMeter;\n}();\nexport { NoopMeter };\nvar NoopMetric = /** @class */function () {\n  function NoopMetric() {}\n  return NoopMetric;\n}();\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */function (_super) {\n  __extends(NoopCounterMetric, _super);\n  function NoopCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopCounterMetric.prototype.add = function (_value, _attributes) {};\n  return NoopCounterMetric;\n}(NoopMetric);\nexport { NoopCounterMetric };\nvar NoopUpDownCounterMetric = /** @class */function (_super) {\n  __extends(NoopUpDownCounterMetric, _super);\n  function NoopUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) {};\n  return NoopUpDownCounterMetric;\n}(NoopMetric);\nexport { NoopUpDownCounterMetric };\nvar NoopHistogramMetric = /** @class */function (_super) {\n  __extends(NoopHistogramMetric, _super);\n  function NoopHistogramMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopHistogramMetric.prototype.record = function (_value, _attributes) {};\n  return NoopHistogramMetric;\n}(NoopMetric);\nexport { NoopHistogramMetric };\nvar NoopObservableMetric = /** @class */function () {\n  function NoopObservableMetric() {}\n  NoopObservableMetric.prototype.addCallback = function (_callback) {};\n  NoopObservableMetric.prototype.removeCallback = function (_callback) {};\n  return NoopObservableMetric;\n}();\nexport { NoopObservableMetric };\nvar NoopObservableCounterMetric = /** @class */function (_super) {\n  __extends(NoopObservableCounterMetric, _super);\n  function NoopObservableCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableCounterMetric;\n}(NoopObservableMetric);\nexport { NoopObservableCounterMetric };\nvar NoopObservableGaugeMetric = /** @class */function (_super) {\n  __extends(NoopObservableGaugeMetric, _super);\n  function NoopObservableGaugeMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableGaugeMetric;\n}(NoopObservableMetric);\nexport { NoopObservableGaugeMetric };\nvar NoopObservableUpDownCounterMetric = /** @class */function (_super) {\n  __extends(NoopObservableUpDownCounterMetric, _super);\n  function NoopObservableUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric);\nexport { NoopObservableUpDownCounterMetric };\nexport var NOOP_METER = new NoopMeter();\n// Synchronous instruments\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nexport var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter() {\n  return NOOP_METER;\n}","map":{"version":3,"names":["NoopMeter","prototype","createHistogram","_name","_options","NOOP_HISTOGRAM_METRIC","createCounter","NOOP_COUNTER_METRIC","createUpDownCounter","NOOP_UP_DOWN_COUNTER_METRIC","createObservableGauge","NOOP_OBSERVABLE_GAUGE_METRIC","createObservableCounter","NOOP_OBSERVABLE_COUNTER_METRIC","createObservableUpDownCounter","NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC","addBatchObservableCallback","_callback","_observables","removeBatchObservableCallback","NoopMetric","NoopCounterMetric","_super","__extends","add","_value","_attributes","NoopUpDownCounterMetric","NoopHistogramMetric","record","NoopObservableMetric","addCallback","removeCallback","NoopObservableCounterMetric","NoopObservableGaugeMetric","NoopObservableUpDownCounterMetric","NOOP_METER","createNoopMeter"],"sources":["C:\\Users\\Ігор\\clone\\node_modules\\@opentelemetry\\api\\src\\metrics\\NoopMeter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './Meter';\nimport {\n  BatchObservableCallback,\n  Counter,\n  Histogram,\n  MetricOptions,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  MetricAttributes,\n  Observable,\n} from './Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  createObservableGauge(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableGauge {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  createObservableCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableCounter {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableUpDownCounter {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    _callback: BatchObservableCallback,\n    _observables: Observable[]\n  ): void {}\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(_callback: BatchObservableCallback): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric\n  extends NoopMetric\n  implements UpDownCounter\n{\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopObservableMetric {\n  addCallback(_callback: ObservableCallback) {}\n\n  removeCallback(_callback: ObservableCallback) {}\n}\n\nexport class NoopObservableCounterMetric\n  extends NoopObservableMetric\n  implements ObservableCounter {}\n\nexport class NoopObservableGaugeMetric\n  extends NoopObservableMetric\n  implements ObservableGauge {}\n\nexport class NoopObservableUpDownCounterMetric\n  extends NoopObservableMetric\n  implements ObservableUpDownCounter {}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n\n// Asynchronous instruments\nexport const NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport const NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport const NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC =\n  new NoopObservableUpDownCounterMetric();\n\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter(): Meter {\n  return NOOP_METER;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}