{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PullRetry = exports.RETRY_CODES = void 0;\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst google_gax_1 = require(\"google-gax\");\n/*!\n * retryable grpc.status codes\n */\nexports.RETRY_CODES = [google_gax_1.grpc.status.DEADLINE_EXCEEDED, google_gax_1.grpc.status.RESOURCE_EXHAUSTED, google_gax_1.grpc.status.ABORTED, google_gax_1.grpc.status.INTERNAL, google_gax_1.grpc.status.UNAVAILABLE, google_gax_1.grpc.status.CANCELLED];\n/**\n * Used to track pull requests and determine if additional requests should be\n * made, etc.\n *\n * @class\n * @private\n */\nclass PullRetry {\n  /**\n   * Determines if a request grpc.status should be retried.\n   *\n   * Deadlines behave kind of unexpectedly on streams, rather than using it as\n   * an indicator of when to give up trying to connect, it actually dictates\n   * how long the stream should stay open. Because of this, it is virtually\n   * impossible to determine whether or not a deadline error is the result of\n   * the server closing the stream or if we timed out waiting for a connection.\n   *\n   * @private\n   * @param {object} grpc.status The request grpc.status.\n   * @returns {boolean}\n   */\n  static retry(err) {\n    if (err.code === google_gax_1.grpc.status.UNAVAILABLE && err.details && err.details.match(/Server shutdownNow invoked/)) {\n      return true;\n    }\n    return exports.RETRY_CODES.includes(err.code);\n  }\n  static resetFailures(err) {\n    return err.code === google_gax_1.grpc.status.OK || err.code === google_gax_1.grpc.status.DEADLINE_EXCEEDED;\n  }\n}\nexports.PullRetry = PullRetry;","map":{"version":3,"names":["google_gax_1","require","exports","RETRY_CODES","grpc","status","DEADLINE_EXCEEDED","RESOURCE_EXHAUSTED","ABORTED","INTERNAL","UNAVAILABLE","CANCELLED","PullRetry","retry","err","code","details","match","includes","resetFailures","OK"],"sources":["../../src/pull-retry.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;AAeA,MAAAA,YAAA,GAAAC,OAAA;AAEA;;;AAGaC,OAAA,CAAAC,WAAW,GAAkB,CACxCH,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACC,iBAAiB,EAC7BN,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACE,kBAAkB,EAC9BP,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACG,OAAO,EACnBR,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACI,QAAQ,EACpBT,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACK,WAAW,EACvBV,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACM,SAAS,CACtB;AAED;;;;;;;AAOA,MAAaC,SAAS;EACpB;;;;;;;;;;;;;EAaA,OAAOC,KAAKA,CAACC,GAAsB;IACjC,IACEA,GAAG,CAACC,IAAI,KAAKf,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACK,WAAW,IACpCI,GAAG,CAACE,OAAO,IACXF,GAAG,CAACE,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC,EAC/C;MACA,OAAO,IAAI;;IAGb,OAAOf,OAAA,CAAAC,WAAW,CAACe,QAAQ,CAACJ,GAAG,CAACC,IAAI,CAAC;EACvC;EAEA,OAAOI,aAAaA,CAACL,GAAsB;IACzC,OACEA,GAAG,CAACC,IAAI,KAAKf,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACe,EAAE,IAAIN,GAAG,CAACC,IAAI,KAAKf,YAAA,CAAAI,IAAI,CAACC,MAAM,CAACC,iBAAiB;EAE7E;;AA9BFJ,OAAA,CAAAU,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}