{"ast":null,"code":"\"use strict\";\n\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExponentialRetry = void 0;\nconst heap_js_1 = require(\"heap-js\");\nconst temporal_1 = require(\"./temporal\");\n// Compare function for Heap so we can use it as a priority queue.\nfunction comparator(a, b) {\n  return a.retryInfo.nextRetry - b.retryInfo.nextRetry;\n}\n/**\n * Provides a helper that will manage your retries using the \"truncated\n * exponential backoff\" strategy.\n *\n * Most of the pieces of this library are doing retries via gax, but for\n * exactly-once delivery, we have some things where gRPC failures won't\n * take care of it.\n *\n * @private\n */\nclass ExponentialRetry {\n  constructor(backoff, maxBackoff) {\n    this._items = new heap_js_1.default(comparator);\n    this._backoffMs = backoff.totalOf('millisecond');\n    this._maxBackoffMs = maxBackoff.totalOf('millisecond');\n  }\n  /**\n   * Shut down all operations/timers/etc and return a list of\n   * items that were still pending retry.\n   *\n   * @private\n   */\n  close() {\n    if (this._timer) {\n      clearTimeout(this._timer);\n    }\n    const leftovers = this._items.toArray();\n    this._items.clear();\n    return leftovers;\n  }\n  /**\n   * Place an item on the retry queue. It's important that it's the\n   * same exact item that was already on the queue, if it's being retried\n   * more than once.\n   *\n   * @private\n   */\n  retryLater(item, callback) {\n    const retried = item;\n    const retryInfo = retried.retryInfo;\n    if (!retryInfo) {\n      // This item's first time through.\n      retried.retryInfo = {\n        firstRetry: Date.now(),\n        nextRetry: Date.now() + this.randomizeDelta(this._backoffMs),\n        multiplier: 1,\n        callback\n      };\n    } else {\n      // Not the first time - handle backoff.\n      const nextMultiplier = retryInfo.multiplier * 2;\n      let delta = this.randomizeDelta(nextMultiplier * this._backoffMs);\n      if (delta > this._maxBackoffMs) {\n        delta = this.randomizeDelta(this._maxBackoffMs);\n      } else {\n        retryInfo.multiplier = nextMultiplier;\n      }\n      retryInfo.nextRetry = Date.now() + delta;\n    }\n    // Re-sort it into the heap with the correct position.\n    // It's my assumption here that any item that is being retried is\n    // very likely near or at the top.\n    this._items.remove(retried);\n    this._items.push(retried);\n    // Schedule the next retry.\n    this.scheduleRetry();\n  }\n  /**\n   * Resets an item that was previously retried. This is useful if you have\n   * persistent items that just need to be retried occasionally.\n   *\n   * @private\n   */\n  reset(item) {\n    const retried = item;\n    delete retried.retryInfo;\n  }\n  // Takes a time delta and adds fuzz.\n  randomizeDelta(durationMs) {\n    // The fuzz distance should never exceed one second, but in the\n    // case of smaller things, don't end up with a negative delta.\n    const magnitude = durationMs < 1000 ? durationMs : 1000;\n    const offset = Math.random() * magnitude - magnitude / 2.0;\n    return durationMs + offset;\n  }\n  // Looks through the queue to see if there's anything to handle.\n  doRetries() {\n    const now = Date.now();\n    while (!this._items.isEmpty()) {\n      const next = this._items.peek();\n      // Within 10msec is close enough.\n      if (next.retryInfo.nextRetry - now < 10) {\n        this._items.pop();\n        next.retryInfo.callback(next, temporal_1.Duration.from({\n          millis: now - next.retryInfo.firstRetry\n        }));\n      } else {\n        break;\n      }\n    }\n    // Is there stuff to retry still?\n    if (!this._items.isEmpty()) {\n      this.scheduleRetry();\n    }\n  }\n  // If there are items to retry, schedule the next timer event.\n  scheduleRetry() {\n    // What's next?\n    const next = this._items.peek();\n    if (next) {\n      let delta = next.retryInfo.nextRetry - Date.now();\n      if (delta < 0) {\n        delta = 0;\n      }\n      if (this._timer) {\n        clearTimeout(this._timer);\n      }\n      this._timer = setTimeout(() => {\n        this.doRetries();\n      }, delta);\n    }\n  }\n}\nexports.ExponentialRetry = ExponentialRetry;","map":{"version":3,"names":["heap_js_1","require","temporal_1","comparator","a","b","retryInfo","nextRetry","ExponentialRetry","constructor","backoff","maxBackoff","_items","default","_backoffMs","totalOf","_maxBackoffMs","close","_timer","clearTimeout","leftovers","toArray","clear","retryLater","item","callback","retried","firstRetry","Date","now","randomizeDelta","multiplier","nextMultiplier","delta","remove","push","scheduleRetry","reset","durationMs","magnitude","offset","Math","random","doRetries","isEmpty","next","peek","pop","Duration","from","millis","setTimeout","exports"],"sources":["../../src/exponential-retry.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}