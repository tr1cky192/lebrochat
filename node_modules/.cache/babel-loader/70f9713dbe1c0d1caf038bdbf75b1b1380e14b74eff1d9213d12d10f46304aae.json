{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PubSub = void 0;\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst projectify_1 = require(\"@google-cloud/projectify\");\nconst extend = require(\"extend\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst gax = require(\"google-gax\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst PKG = require('../../package.json');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst v1 = require('./v1');\nconst util_1 = require(\"./util\");\nconst schema_1 = require(\"./schema\");\nconst snapshot_1 = require(\"./snapshot\");\nconst subscription_1 = require(\"./subscription\");\nconst topic_1 = require(\"./topic\");\n/**\n * Project ID placeholder.\n * @type {string}\n * @private\n */\nconst PROJECT_ID_PLACEHOLDER = '{{projectId}}';\n/**\n * @typedef {object} ClientConfig\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [apiEndpoint] The `apiEndpoint` from options will set the\n *     host. If not set, the `PUBSUB_EMULATOR_HOST` environment variable from the\n *     gcloud SDK is honored. We also check the `CLOUD_API_ENDPOINT_OVERRIDES_PUBSUB`\n *     environment variable used by `gcloud alpha pubsub`. Otherwise the actual API\n *     endpoint will be used. Note that if the URL doesn't end in '.googleapis.com',\n *     we will assume that it's an emulator and disable strict SSL checks.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n/**\n * [Cloud Pub/Sub](https://developers.google.com/pubsub/overview) is a\n * reliable, many-to-many, asynchronous messaging service from Cloud\n * Platform.\n *\n * @class\n *\n * @see [Cloud Pub/Sub overview]{@link https://developers.google.com/pubsub/overview}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example Import the client library\n * ```\n * const {PubSub} = require('@google-cloud/pubsub');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * const pubsub = new PubSub();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * const pubsub = new PubSub({\n *   projectId: 'your-project-id',\n *   keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:pubsub_quickstart_create_topic\n * Full quickstart example:\n */\nclass PubSub {\n  constructor(options) {\n    this.getSubscriptionsStream = paginator_1.paginator.streamify('getSubscriptions');\n    this.getSnapshotsStream = paginator_1.paginator.streamify('getSnapshots');\n    this.getTopicsStream = paginator_1.paginator.streamify('getTopics');\n    this.isOpen = true;\n    // Needed for potentially large responses that may come from using exactly-once delivery,\n    // as well as trying to work around silent connection failures.\n    //\n    // These will get passed down to grpc client objects. User values will overwrite these.\n    const grpcDefaults = {\n      'grpc.max_metadata_size': 4 * 1024 * 1024,\n      'grpc.keepalive_time_ms': 300000,\n      'grpc.keepalive_timeout_ms': 20000 // 20 seconds\n    };\n\n    options = Object.assign(grpcDefaults, options || {});\n    // Determine what scopes are needed.\n    // It is the union of the scopes on both clients.\n    const clientClasses = [v1.SubscriberClient, v1.PublisherClient];\n    const allScopes = {};\n    for (const clientClass of clientClasses) {\n      for (const scope of clientClass.scopes) {\n        allScopes[scope] = true;\n      }\n    }\n    this.options = Object.assign({\n      libName: 'gccl',\n      libVersion: PKG.version,\n      scopes: Object.keys(allScopes)\n    }, options);\n    /**\n     * @name PubSub#isEmulator\n     * @type {boolean}\n     */\n    this.isEmulator = false;\n    this.determineBaseUrl_();\n    this.api = {};\n    this.auth = new google_auth_library_1.GoogleAuth(this.options);\n    this.projectId = this.options.projectId || PROJECT_ID_PLACEHOLDER;\n    if (this.projectId !== PROJECT_ID_PLACEHOLDER) {\n      this.name = PubSub.formatName_(this.projectId);\n    }\n  }\n  /**\n   * Returns true if we have actually resolved the full project name.\n   *\n   * @returns {boolean} true if the name is resolved.\n   */\n  get isIdResolved() {\n    return this.projectId.indexOf(PROJECT_ID_PLACEHOLDER) < 0;\n  }\n  close(callback) {\n    const definedCallback = callback || (() => {});\n    if (this.isOpen) {\n      this.isOpen = false;\n      this.closeAllClients_().then(() => {\n        var _a;\n        return (_a = this.schemaClient) === null || _a === void 0 ? void 0 : _a.close();\n      }).then(() => {\n        definedCallback(null);\n      }).catch(definedCallback);\n    } else {\n      definedCallback(null);\n    }\n  }\n  /**\n   * Create a schema in the project.\n   *\n   * @see [Schemas: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/create}\n   * @see {@link Schema#create}\n   *\n   * @throws {Error} If a schema ID or name is not provided.\n   * @throws {Error} If an invalid SchemaType is provided.\n   * @throws {Error} If an invalid schema definition is provided.\n   *\n   * @param {string} schemaId The name or ID of the subscription.\n   * @param {SchemaType} type The type of the schema (Protobuf, Avro, etc).\n   * @param {string} definition The text describing the schema in terms of the type.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<Schema>}\n   *\n   * @example Create a schema.\n   * ```\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * await pubsub.createSchema(\n   *   'messageType',\n   *   SchemaTypes.Avro,\n   *   '{...avro definition...}'\n   * );\n   * ```\n   */\n  async createSchema(schemaId, type, definition, gaxOpts) {\n    // This populates projectId for us.\n    await this.getClientConfig();\n    const schemaName = schema_1.Schema.formatName_(this.projectId, schemaId);\n    const request = {\n      parent: this.name,\n      schemaId,\n      schema: {\n        name: schemaName,\n        type,\n        definition\n      }\n    };\n    const client = await this.getSchemaClient_();\n    await client.createSchema(request, gaxOpts);\n    return new schema_1.Schema(this, schemaName);\n  }\n  createSubscription(topic, name, optionsOrCallback, callback) {\n    if (typeof topic !== 'string' && !(topic instanceof topic_1.Topic)) {\n      throw new Error('A Topic is required for a new subscription.');\n    }\n    if (typeof name !== 'string') {\n      throw new Error('A subscription name is required.');\n    }\n    if (typeof topic === 'string') {\n      topic = this.topic(topic);\n    }\n    let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    // Make a deep copy of options to not pollute caller object.\n    options = extend(true, {}, options);\n    const gaxOpts = options.gaxOpts;\n    const flowControl = options.flowControl;\n    delete options.gaxOpts;\n    delete options.flowControl;\n    const metadata = subscription_1.Subscription.formatMetadata_(options);\n    let subscriptionCtorOptions = flowControl ? {\n      flowControl\n    } : {};\n    subscriptionCtorOptions = Object.assign(subscriptionCtorOptions, metadata);\n    const subscription = this.subscription(name, subscriptionCtorOptions);\n    const reqOpts = Object.assign(metadata, {\n      topic: topic.name,\n      name: subscription.name\n    });\n    this.request({\n      client: 'SubscriberClient',\n      method: 'createSubscription',\n      reqOpts,\n      gaxOpts\n    }, (err, resp) => {\n      var _a;\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      subscription.metadata = resp;\n      // If this is the first call we've made, the projectId might be empty still.\n      if ((_a = subscription.name) === null || _a === void 0 ? void 0 : _a.includes(PROJECT_ID_PLACEHOLDER)) {\n        if (subscription.metadata && subscription.metadata.name) {\n          subscription.name = subscription_1.Subscription.formatName_(this.projectId, subscription.metadata.name);\n        }\n      }\n      callback(null, subscription, resp);\n    });\n  }\n  createTopic(name, optsOrCallback, callback) {\n    const reqOpts = typeof name === 'string' ? {\n      name\n    } : name;\n    // We don't allow a blank name, but this will let topic() handle that case.\n    const topic = this.topic(reqOpts.name || '');\n    // Topic#constructor might have canonicalized the name.\n    reqOpts.name = topic.name;\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    this.request({\n      client: 'PublisherClient',\n      method: 'createTopic',\n      reqOpts,\n      gaxOpts\n    }, (err, resp) => {\n      var _a;\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      topic.metadata = resp;\n      // If this is the first call we've made, the projectId might be empty still.\n      if ((_a = topic.name) === null || _a === void 0 ? void 0 : _a.includes(PROJECT_ID_PLACEHOLDER)) {\n        if (topic.metadata && topic.metadata.name) {\n          topic.name = topic_1.Topic.formatName_(this.projectId, topic.metadata.name);\n        }\n      }\n      callback(null, topic, resp);\n    });\n  }\n  detachSubscription(name, optsOrCallback, callback) {\n    if (typeof name !== 'string') {\n      throw new Error('A subscription name is required.');\n    }\n    const sub = this.subscription(name);\n    const reqOpts = {\n      subscription: sub.name\n    };\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    this.request({\n      client: 'PublisherClient',\n      method: 'detachSubscription',\n      reqOpts,\n      gaxOpts: gaxOpts\n    }, callback);\n  }\n  /**\n   * Determine the appropriate endpoint to use for API requests, first trying\n   * the `apiEndpoint` parameter. If that isn't set, we try the Pub/Sub emulator\n   * environment variable (PUBSUB_EMULATOR_HOST). If that is also null, we try\n   * the standard `gcloud alpha pubsub` environment variable\n   * (CLOUDSDK_API_ENDPOINT_OVERRIDES_PUBSUB). Otherwise the default production\n   * API is used.\n   *\n   * Note that if the URL doesn't end in '.googleapis.com', we will assume that\n   * it's an emulator and disable strict SSL checks.\n   *\n   * @private\n   */\n  determineBaseUrl_() {\n    // We allow an override from the client object options, or from\n    // one of these variables. The CLOUDSDK variable is provided for\n    // compatibility with the `gcloud alpha` utility.\n    const gcloudVarName = 'CLOUDSDK_API_ENDPOINT_OVERRIDES_PUBSUB';\n    const emulatorVarName = 'PUBSUB_EMULATOR_HOST';\n    const apiEndpoint = this.options.apiEndpoint || process.env[emulatorVarName] || process.env[gcloudVarName];\n    if (!apiEndpoint) {\n      return;\n    }\n    // Parse the URL into a hostname and port, if possible.\n    const leadingProtocol = new RegExp('^https?://');\n    const trailingSlashes = new RegExp('/*$');\n    const baseUrlParts = apiEndpoint.replace(leadingProtocol, '').replace(trailingSlashes, '').split(':');\n    this.options.servicePath = baseUrlParts[0];\n    if (!baseUrlParts[1]) {\n      // No port was given -- figure it out from the protocol.\n      if (apiEndpoint.startsWith('https')) {\n        this.options.port = 443;\n      } else if (apiEndpoint.startsWith('http')) {\n        this.options.port = 80;\n      } else {\n        this.options.port = undefined;\n      }\n    } else {\n      this.options.port = parseInt(baseUrlParts[1], 10);\n    }\n    // If this looks like a GCP URL of some kind, don't go into emulator\n    // mode. Otherwise, supply a fake SSL provider so a real cert isn't\n    // required for running the emulator.\n    const officialUrlMatch = this.options.servicePath.endsWith('.googleapis.com');\n    if (!officialUrlMatch) {\n      const grpcInstance = this.options.grpc || gax.grpc;\n      this.options.sslCreds = grpcInstance.credentials.createInsecure();\n      this.isEmulator = true;\n    }\n    if (!this.options.projectId && process.env.PUBSUB_PROJECT_ID) {\n      this.options.projectId = process.env.PUBSUB_PROJECT_ID;\n    }\n  }\n  /**\n   * Get a list of schemas associated with your project.\n   *\n   * The returned AsyncIterable will resolve to {@link google.pubsub.v1.ISchema} objects.\n   *\n   * This method returns an async iterable. These objects can be adapted\n   * to work in a Promise/then framework, as well as with callbacks, but\n   * this discussion is considered out of scope for these docs.\n   *\n   * @see [Schemas: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/list}\n   * @see [More about async iterators]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of}\n   *\n   * @param {google.pubsub.v1.SchemaView} [view] The type of schema objects\n   *   requested, which should be an enum value from {@link SchemaViews}. Defaults\n   *   to Full.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {AsyncIterable<ISchema>}\n   *\n   * @example\n   * ```\n   * for await (const s of pubsub.listSchemas()) {\n   *   const moreInfo = await s.get();\n   * }\n   * ```\n   */\n  async *listSchemas(view = schema_1.SchemaViews.Basic, options) {\n    const client = await this.getSchemaClient_();\n    const query = {\n      parent: this.name,\n      view\n    };\n    for await (const s of client.listSchemasAsync(query, options)) {\n      yield s;\n    }\n  }\n  getSnapshots(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = Object.assign({\n      project: PubSub.formatName_(this.projectId)\n    }, options);\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'SubscriberClient',\n      method: 'listSnapshots',\n      reqOpts,\n      gaxOpts\n    }, (err, rawSnapshots, ...args) => {\n      let snapshots;\n      if (rawSnapshots) {\n        snapshots = rawSnapshots.map(snapshot => {\n          const snapshotInstance = this.snapshot(snapshot.name);\n          snapshotInstance.metadata = snapshot;\n          return snapshotInstance;\n        });\n      }\n      callback(err, snapshots, ...args);\n    });\n  }\n  getSubscriptions(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    let topic = options.topic;\n    if (topic) {\n      if (!(topic instanceof topic_1.Topic)) {\n        topic = this.topic(topic);\n      }\n      return topic.getSubscriptions(options, callback);\n    }\n    const reqOpts = Object.assign({}, options);\n    reqOpts.project = 'projects/' + this.projectId;\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'SubscriberClient',\n      method: 'listSubscriptions',\n      reqOpts,\n      gaxOpts\n    }, (err, rawSubs, ...args) => {\n      let subscriptions;\n      if (rawSubs) {\n        subscriptions = rawSubs.map(sub => {\n          const subscriptionInstance = this.subscription(sub.name);\n          subscriptionInstance.metadata = sub;\n          return subscriptionInstance;\n        });\n      }\n      callback(err, subscriptions, ...args);\n    });\n  }\n  getTopics(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = Object.assign({\n      project: 'projects/' + this.projectId\n    }, options);\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'PublisherClient',\n      method: 'listTopics',\n      reqOpts,\n      gaxOpts\n    }, (err, rawTopics, ...args) => {\n      let topics;\n      if (rawTopics) {\n        topics = rawTopics.map(topic => {\n          const topicInstance = this.topic(topic.name);\n          topicInstance.metadata = topic;\n          return topicInstance;\n        });\n      }\n      callback(err, topics, ...args);\n    });\n  }\n  /**\n   * Retrieve a client configuration, suitable for passing into a GAPIC\n   * 'v1' class constructor. This will fill out projectId, emulator URLs,\n   * and so forth.\n   *\n   * @returns {Promise<ClientConfig>} the filled client configuration.\n   */\n  async getClientConfig() {\n    if (!this.projectId || this.projectId === PROJECT_ID_PLACEHOLDER) {\n      let projectId;\n      try {\n        projectId = await this.auth.getProjectId();\n      } catch (e) {\n        if (!this.isEmulator) {\n          throw e;\n        }\n        projectId = '';\n      }\n      this.projectId = projectId;\n      this.name = PubSub.formatName_(this.projectId);\n      this.options.projectId = projectId;\n    }\n    return this.options;\n  }\n  /**\n   * Gets a schema client, creating one if needed.\n   * @private\n   */\n  async getSchemaClient_() {\n    if (!this.schemaClient) {\n      const options = await this.getClientConfig();\n      this.schemaClient = new v1.SchemaServiceClient(options);\n    }\n    return this.schemaClient;\n  }\n  /**\n   * Callback function to PubSub.getClient_().\n   * @private\n   * @callback GetClientCallback\n   * @param err - Error, if any.\n   * @param gaxClient - The gax client specified in RequestConfig.client.\n   *                    Typed any since it's importing Javascript source.\n   */\n  /**\n   * Get the PubSub client object.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @param {function} [callback] The callback function.\n   */\n  getClient_(config, callback) {\n    this.getClientAsync_(config).then(client => callback(null, client), callback);\n  }\n  /**\n   * Get the PubSub client object.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @returns {Promise}\n   */\n  async getClientAsync_(config) {\n    // Make sure we've got a fully created config with projectId and such.\n    const options = await this.getClientConfig();\n    let gaxClient = this.api[config.client];\n    if (!gaxClient) {\n      // Lazily instantiate client.\n      gaxClient = new v1[config.client](options);\n      this.api[config.client] = gaxClient;\n    }\n    return gaxClient;\n  }\n  /**\n   * Close all open client objects.\n   *\n   * @private\n   *\n   * @returns {Promise}\n   */\n  async closeAllClients_() {\n    const promises = [];\n    for (const clientConfig of Object.keys(this.api)) {\n      const gaxClient = this.api[clientConfig];\n      promises.push(gaxClient.close());\n      delete this.api[clientConfig];\n    }\n    await Promise.all(promises);\n  }\n  /**\n   * Funnel all API requests through this method, to be sure we have a project\n   * ID.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @param {function} [callback] The callback function.\n   */\n  request(config, callback) {\n    // This prevents further requests, in case any publishers were hanging around.\n    if (!this.isOpen) {\n      const statusObject = {\n        code: 0,\n        details: 'Cannot use a closed PubSub object.',\n        metadata: null\n      };\n      const err = new Error(statusObject.details);\n      Object.assign(err, statusObject);\n      callback(err);\n      return;\n    }\n    this.getClient_(config, (err, client) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      let reqOpts = extend(true, {}, config.reqOpts);\n      reqOpts = (0, projectify_1.replaceProjectIdToken)(reqOpts, this.projectId);\n      client[config.method](reqOpts, config.gaxOpts, callback);\n    });\n  }\n  /**\n   * Create a Schema object, representing a schema within the project.\n   * See {@link PubSub#createSchema} or {@link Schema#create} to create a schema.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The ID or name of the schema.\n   * @returns {Schema} A {@link Schema} instance.\n   *\n   * @example\n   * ```\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const schema = pubsub.schema('my-schema');\n   * ```\n   */\n  schema(idOrName) {\n    return new schema_1.Schema(this, idOrName);\n  }\n  /**\n   * Create a Snapshot object. See {@link Subscription#createSnapshot} to\n   * create a snapshot.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The name of the snapshot.\n   * @returns {Snapshot} A {@link Snapshot} instance.\n   *\n   * @example\n   * ```\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const snapshot = pubsub.snapshot('my-snapshot');\n   * ```\n   */\n  snapshot(name) {\n    if (typeof name !== 'string') {\n      throw new Error('You must supply a valid name for the snapshot.');\n    }\n    return new snapshot_1.Snapshot(this, name);\n  }\n  /**\n   * Create a Subscription object. This command by itself will not run any API\n   * requests. You will receive a {@link Subscription} object,\n   * which will allow you to interact with a subscription.\n   *\n   * @throws {Error} If subscription name is omitted.\n   *\n   * @param {string} name Name of the subscription.\n   * @param {SubscriberOptions} [options] Configuration object.\n   * @returns {Subscription} A {@link Subscription} instance.\n   *\n   * @example\n   * ```\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const subscription = pubsub.subscription('my-subscription');\n   *\n   * // Register a listener for `message` events.\n   * subscription.on('message', function(message) {\n   *   // Called every time a message is received.\n   *   // message.id = ID of the message.\n   *   // message.ackId = ID used to acknowledge the message receival.\n   *   // message.data = Contents of the message.\n   *   // message.attributes = Attributes of the message.\n   *   // message.publishTime = Date when Pub/Sub received the message.\n   * });\n   * ```\n   */\n  subscription(name, options) {\n    if (!name) {\n      throw new Error('A name must be specified for a subscription.');\n    }\n    return new subscription_1.Subscription(this, name, options);\n  }\n  /**\n   * Create a Topic object. See {@link PubSub#createTopic} to create a topic.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The name of the topic.\n   * @param {PublishOptions} [options] Publisher configuration object.\n   * @returns {Topic} A {@link Topic} instance.\n   *\n   * @example\n   * ```\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   * ```\n   */\n  topic(name, options) {\n    if (!name) {\n      throw new Error('A name must be specified for a topic.');\n    }\n    return new topic_1.Topic(this, name, options);\n  }\n  /**\n   * Validate a schema definition.\n   *\n   * @see [Schemas: validateSchema API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.schemas/validate}\n   *\n   * @throws {Error} if the validation fails.\n   *\n   * @param {ISchema} schema The schema definition you wish to validate.\n   * @param {object} [options] Request configuration options, outlined\n   *   here: https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html.\n   * @returns {Promise<void>}\n   */\n  async validateSchema(schema, gaxOpts) {\n    const client = await this.getSchemaClient_();\n    await client.validateSchema({\n      parent: this.name,\n      schema\n    }, gaxOpts);\n  }\n  /*!\n   * Format the name of a project. A project's full name is in the\n   * format of projects/{projectId}.\n   *\n   * The GAPIC client should do this for us, but since we maintain\n   * names rather than IDs, this is simpler.\n   *\n   * @private\n   */\n  static formatName_(name) {\n    if (typeof name !== 'string') {\n      throw new Error('A name is required to identify a project.');\n    }\n    // Simple check if the name is already formatted.\n    if (name.indexOf('/') > -1) {\n      return name;\n    }\n    return `projects/${name}`;\n  }\n}\nexports.PubSub = PubSub;\n/**\n * Get a list of the {@link Snapshot} objects as a readable object stream.\n *\n * @method PubSub#getSnapshotsStream\n * @param {GetSnapshotsRequest} [options] Configuration object. See\n *     {@link PubSub#getSnapshots} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Snapshot} instances.\n *\n * @example\n * ```\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSnapshotsStream()\n *   .on('error', console.error)\n *   .on('data', function(snapshot) {\n *     // snapshot is a Snapshot object.\n *   })\n *   .on('end', function() {\n *     // All snapshots retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSnapshotsStream()\n *   .on('data', function(snapshot) {\n *     this.end();\n *   });\n * ```\n */\n/**\n * Get a list of the {@link Subscription} objects registered to all of\n * your project's topics as a readable object stream.\n *\n * @method PubSub#getSubscriptionsStream\n * @param {GetSubscriptionsRequest} [options] Configuration object. See\n *     {@link PubSub#getSubscriptions} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Subscription} instances.\n *\n * @example\n * ```\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSubscriptionsStream()\n *   .on('error', console.error)\n *   .on('data', function(subscription) {\n *     // subscription is a Subscription object.\n *   })\n *   .on('end', function() {\n *     // All subscriptions retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSubscriptionsStream()\n *   .on('data', function(subscription) {\n *     this.end();\n *   });\n * ```\n */\n/**\n * Get a list of the {module:pubsub/topic} objects registered to your project as\n * a readable object stream.\n *\n * @method PubSub#getTopicsStream\n * @param {GetTopicsRequest} [options] Configuration object. See\n *     {@link PubSub#getTopics} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Topic} instances.\n *\n * @example\n * ```\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getTopicsStream()\n *   .on('error', console.error)\n *   .on('data', function(topic) {\n *     // topic is a Topic object.\n *   })\n *   .on('end', function() {\n *     // All topics retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getTopicsStream()\n *   .on('data', function(topic) {\n *     this.end();\n *   });\n * ```\n */\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(PubSub, ['getSnapshots', 'getSubscriptions', 'getTopics']);\n/*! Developer Documentation\n *\n * Existing async methods (except for streams) will return a Promise in the event\n * that a callback is omitted. Future methods will not allow for a callback.\n * (Use .then() on the returned Promise instead.)\n */\n(0, util_1.promisifySome)(PubSub, PubSub.prototype, ['close', 'createSubscription', 'createTopic', 'detachSubscription', 'getSnapshots', 'getSubscriptions', 'getTopics']);","map":{"version":3,"names":["paginator_1","require","projectify_1","extend","google_auth_library_1","gax","PKG","v1","util_1","schema_1","snapshot_1","subscription_1","topic_1","PROJECT_ID_PLACEHOLDER","PubSub","constructor","options","getSubscriptionsStream","paginator","streamify","getSnapshotsStream","getTopicsStream","isOpen","grpcDefaults","Object","assign","clientClasses","SubscriberClient","PublisherClient","allScopes","clientClass","scope","scopes","libName","libVersion","version","keys","isEmulator","determineBaseUrl_","api","auth","GoogleAuth","projectId","name","formatName_","isIdResolved","indexOf","close","callback","definedCallback","closeAllClients_","then","_a","schemaClient","catch","createSchema","schemaId","type","definition","gaxOpts","getClientConfig","schemaName","Schema","request","parent","schema","client","getSchemaClient_","createSubscription","topic","optionsOrCallback","Topic","Error","flowControl","metadata","Subscription","formatMetadata_","subscriptionCtorOptions","subscription","reqOpts","method","err","resp","includes","createTopic","optsOrCallback","detachSubscription","sub","gcloudVarName","emulatorVarName","apiEndpoint","process","env","leadingProtocol","RegExp","trailingSlashes","baseUrlParts","replace","split","servicePath","startsWith","port","undefined","parseInt","officialUrlMatch","endsWith","grpcInstance","grpc","sslCreds","credentials","createInsecure","PUBSUB_PROJECT_ID","listSchemas","view","SchemaViews","Basic","query","s","listSchemasAsync","getSnapshots","project","autoPaginate","rawSnapshots","args","snapshots","map","snapshot","snapshotInstance","getSubscriptions","rawSubs","subscriptions","subscriptionInstance","getTopics","rawTopics","topics","topicInstance","getProjectId","e","SchemaServiceClient","getClient_","config","getClientAsync_","gaxClient","promises","clientConfig","push","Promise","all","statusObject","code","details","replaceProjectIdToken","idOrName","Snapshot","validateSchema","exports","promisifySome","prototype"],"sources":["../../src/pubsub.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}